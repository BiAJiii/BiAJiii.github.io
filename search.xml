<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试刷刷刷</title>
      <link href="/2023/03/25/%E9%9D%A2%E8%AF%95%E5%88%B7%E5%88%B7%E5%88%B7/"/>
      <url>/2023/03/25/%E9%9D%A2%E8%AF%95%E5%88%B7%E5%88%B7%E5%88%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="JS、TS、ES6"><a href="#JS、TS、ES6" class="headerlink" title="JS、TS、ES6"></a>JS、TS、ES6</h1><h2 id="1、传值和传址"><a href="#1、传值和传址" class="headerlink" title="1、传值和传址"></a>1、传值和传址</h2><p>基础数据类型是传值：存放在栈中（字符串、数字等）</p><p>复杂数据类型是传址：存放在堆中，指向栈（对象、函数等）</p><h2 id="2、判断数据类型"><a href="#2、判断数据类型" class="headerlink" title="2、判断数据类型"></a>2、判断数据类型</h2><p>1、typeof 主要用来判断基本数据类型</p><p>2、instanceof：数组+ instanceof + 构造原型 返回布尔值</p><p>3、object.prototype.toString.call()   会直接生产[object 输入数据的数据类型]</p><h2 id="3、slice、split、splice"><a href="#3、slice、split、splice" class="headerlink" title="3、slice、split、splice"></a>3、slice、split、splice</h2><ul><li>splice：从数组中添加或删除元素，返回新的数组(⚠️：会对原数组进行更改，获取的是新的数组)</li></ul><p>添加：splice(index，0，data1，data2，……);index:插入的元素的起始位置；0：删除的个数为0；data1，data2：添加的元素；</p><p>删除：splice(index,0);index:删除数组的起始位置；0：删除元素的个数；</p><ul><li>slice：用于截取数组，并返回截取到的新的数组，数组与字符串对象都使用(⚠️：对原数组不会改变)</li></ul><p>语法：arr.slice(start,end)  左闭右开</p><ul><li>split：切割字符串，将字符串转化为字符串数组</li></ul><p>根据a.split(‘’)中传入的符号，对字符串进行分割并下放入数组。</p><h2 id="4、数组遍历方法"><a href="#4、数组遍历方法" class="headerlink" title="4、数组遍历方法"></a>4、数组遍历方法</h2><p>1、foreach</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303092145519.png" alt="img"></p><p>2、map</p><p><strong>map即是 “映射”的意思 ，原数组被“映射”成对应新数组</strong><br><strong>map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。<br>map() 不会改变原始数组。<br>map() 不会对空数组进行检测。</strong><br><strong>map支持return</strong></p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303092147863.png" alt="img"></p><p>map和forEach区别</p><ol><li>forEach()和map()方法通常用于遍历Array元素</li><li>forEach：总是返回undefined；用来遍历数组中的每一项，不影响原数组，只是对数组每一项进行一次操作，并不能修改</li><li>map：返回一个包含已转换元素的新数组；支持return，相当于与原数组克隆了一份，把克隆的每项改变了，也不影响原数组</li></ol><p>3、filter</p><p>filter用于对数组进行过滤。<br>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。<br>filter() 不会对空数组进行检测；不会改变原始数组</p><p><code>array.filter(function(currentValue,index,arr), thisValue)</code></p><p>4、for..of</p><p>for-of循环不仅支持数组，还支持大多数类数组对象，例如DOM NodeList对象。但是for of也有一个致命伤，没有索引。对，这是优点也是缺点。遍历数组对象，直接就是item.属性(或者item[属性]),而不用像for循环那样arr[index].属性(arrindex)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(let item of arr)&#123;</span><br><span class="line">    console.log(item);    //item指的的就是数组每一项的值。不是索引。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、for…in</p><p>for in循环是用来遍历对象的。要知道JavaScript对象的所有属性都是字符串，不过属性对应的值可以是任意数据类型。（注意：遍历时不仅能读取对象自身上面的成员属性，也能遍历出对象的原型属性）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;a:1, b:2, c:3&#125;;</span><br><span class="line">for (let prop in obj) &#123;    //prop指对象的属性名</span><br><span class="line">console.log(prop, obj[prop]);</span><br><span class="line">&#125;</span><br><span class="line">// 输出:</span><br><span class="line">// a,1</span><br><span class="line">// b,2</span><br><span class="line">// c,3</span><br></pre></td></tr></table></figure><p>6、find方法</p><ul><li><strong>遍历数组，找到第一个符合条件的项，并返回该项；不会继续遍历数组；否则返回undefined</strong></li><li><strong>不会改变数组</strong></li></ul><p><code>[1,4,-5,10].find((n) =&gt; n &lt; 0 ) </code></p><p>7、findindex方法</p><ul><li><strong>遍历数组找到第一个符合条件的项，并返回该项的索引值；不会继续遍历数组；否则返回-1。</strong></li><li><strong>不会改变数组</strong></li></ul><p>同上，只不过返回的是索引</p><p>9、some方法</p><p><strong>1）如果<code>有一个元素满足条件</code>，则表达式返回<code>true</code>，剩余的元素不会再执行检测。</strong><br><strong>2）如果没有满足条件的元素，则返回false。</strong><br><strong>3）返回值是布尔值</strong></p><p>注：</p><p><strong>1) some() 不会对空数组进行检测。</strong><br><strong>2) some() 不会改变原始数组。</strong></p><p>10、every方法</p><p><strong>1）如果数组中有一个元素不满足，则整个表达式返回false；且剩余的元素不会再进行检测</strong><br><strong>2）如果<code>所有元素都满足条件</code>，则返回<code>true</code>。</strong><br><strong>3）返回值是布尔值</strong></p><p>10、reduce方法</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303251631095.png" alt="image-20230325163135999"></p><p>total为上次调用返回的值或者初始值，每循环一次，结果都会迭代掉total，变成新的total。</p><p><strong>1）接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始缩减，最终为一个值。</strong><br><strong>2）第二个参数作为第一次调用的a的值</strong></p><h2 id="5、深拷贝和浅拷贝"><a href="#5、深拷贝和浅拷贝" class="headerlink" title="5、深拷贝和浅拷贝"></a>5、深拷贝和浅拷贝</h2><p>浅拷贝：复杂数据类型的地址</p><p>深拷贝：完全赋值一份数据一样的非同一地址的数据</p><h2 id="6、this"><a href="#6、this" class="headerlink" title="6、this"></a>6、this</h2><p>this指的是当前代码执行的上下文</p><p>顶层全局作用域为window</p><p>声明的全局变量挂在在window上</p><p>普通函数的this是执行时绑定，箭头函数是声明时绑定this（声明时的作用域的this）；比如在windows声明了对象A，对象A中不管嵌套了多少层，再打印this，这个this都是指向声明A时作用域下的this，即window</p><h2 id="7、改变this的方法"><a href="#7、改变this的方法" class="headerlink" title="7、改变this的方法"></a>7、改变this的方法</h2><p>1、 call 改名this指向并立即执行函数，参数逗号分隔</p><p>2、apply 改名this指向并立即执行函数，参数以数组形式写</p><p>3、bind 语法和call相同，但改变完不会立即执行，需要在后面再加个小括号才执行</p><h2 id="8、new的过程"><a href="#8、new的过程" class="headerlink" title="8、new的过程"></a>8、new的过程</h2><p><code>let obj = new Object()</code></p><ol><li>首先创建了一个新的<code>空对象</code></li><li><code>设置原型</code>，将对象的原型设置为函数的<code>prototype</code>对象。（继承原型链）</li><li>让函数的<code>this</code>指向这个对象，执行构造函数的代码（构造函数继承）</li><li>判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</li></ol><p>如果没有return或者return的是简单数据类型，则忽略；直接进行return this</p><p>如果return的是复杂数据类型，则返回的就是当前return的值</p><h2 id="9、异步解决方案"><a href="#9、异步解决方案" class="headerlink" title="9、异步解决方案"></a>9、异步解决方案</h2><p>1、callback回调函数（将回调函数以传参的方式先传给函数，等到时机成熟，函数再去调用回调函数）</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function get(callback)&#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    callback(&quot;你好&quot;)</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">get((res) =&gt; &#123;</span><br><span class="line">  console.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote><p>2、promise函数</p><p>promise函数有三种状态：pending &#x3D;&gt; 转为另外两种状态resolve&#x2F;reject</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function p1(param) &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    resolve(&quot;成功&quot;)</span><br><span class="line">    reject(&quot;失败&quot;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p1().then(res =&gt; &#123;</span><br><span class="line">  console.log(res)</span><br><span class="line">&#125;).catch(err =&gt; &#123;</span><br><span class="line">  console.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote><p>promise.all：多个异步任务执行完进行操作</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//参数为promise对象组成的数组，then必须全resolve</span><br><span class="line">promise.all([p_1(),p_2(),p_3()]).then(res =&gt; &#123;</span><br><span class="line">...</span><br><span class="line">&#125;).catch(err =&gt; &#123;</span><br><span class="line">//返回最近的一个错误</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote><p>3、asycn_await</p><p>async可以单独使用，且返回的是promise对象</p><p>await（后跟异步或promise）必须配合async使用</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function f3(params) &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      resolve(&quot;成！&quot;)</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function f3_await() &#123;</span><br><span class="line">  let res = await f3()</span><br><span class="line">  console.log(res)</span><br><span class="line">&#125;</span><br><span class="line">//不用async的话，调用f3_await也只是在pending状态</span><br></pre></td></tr></table></figure></blockquote><h2 id="10、原型链prototpye-x2F-proto"><a href="#10、原型链prototpye-x2F-proto" class="headerlink" title="10、原型链prototpye&#x2F;_proto_"></a>10、原型链prototpye&#x2F;_<em>proto</em>_</h2><p>prototype：只有函数对象才有，即（构造）函数原型对象，会返回一个对象 </p><p>__proto__：所有对象都有此属性，总是指向该对象对应的构造函数的原型对象</p><p>constructor：__proto__下面的constructor指向构造函数自己（用于判断对象的原型是否为某个对象）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象.__proto__ === 对象的构造函数.prototype  // true</span><br><span class="line">对象.__proto__.__proto__ === 对象的构造函数.prototype.__proto__  // true</span><br><span class="line">对象.__proto__.constructor==对象的构造函数</span><br></pre></td></tr></table></figure><ul><li><p>原型链终点：Object.prototype</p></li><li><p>对象访问属性时，先在自身属性查找，找不到再去__proto__的原型链上查找，直到找不到为止会返回undefined</p></li></ul><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303111345497.png" alt="image-20230311134532149"></p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303251724816.png" alt="img"></p><h2 id="11、闭包"><a href="#11、闭包" class="headerlink" title="11、闭包"></a>11、闭包</h2><p>如果一个函数访问了此函数的父级及父级以上的作用域变量，那么这个函数就是一个闭包。</p><p>闭包：函数套函数，并把内部函数return，内部函数可以访问外部函数的变量，一级级向上找；是内部函数访问父函数的变量的结果（内部函数引用外部函数的局部变量，延长外部函数的变量生命周期）</p><p>特点：</p><p> 让外部访问函数内部变量成为可能；</p><p> 局部变量会常驻在内存中；</p><p> 可以避免使用全局变量，防止全局变量污染；</p><p> 会造成内存泄漏（有一块内存空间被长期占用，而不被释放）</p><p>作用：封装变量，收敛权限</p><p>优点：不会造成全局变量污染</p><p>内存：垃圾回收机制：当一个变量在作用域内部不再被使用，会被内存释放（使用闭包不会被垃圾回收机制回收，可能造成内存泄漏）</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function fn() &#123;</span><br><span class="line">   var num=3;</span><br><span class="line">   return function()&#123;</span><br><span class="line">      var n=0;</span><br><span class="line">      console.log(++n);</span><br><span class="line">      console.log(++num);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">var fn1=fn();</span><br><span class="line">fn1();//n=1;num=4</span><br><span class="line">fn1();//n=1;num=5</span><br></pre></td></tr></table></figure></blockquote><p>​一般情况下，在函数fn执行完后，就应该连同它里面的变量一同被销毁，但是在这个例子中，匿名函数作为fn的返回值被赋值给了fn1，这时候相当于fn1&#x3D;function(){var n &#x3D; 0 … }，并且匿名函数内部引用着fn里的变量num，所以变量num无法被销毁，而变量n是每次被调用时新创建的，所以每次fn1执行完后它就把属于自己的变量连同自己一起销毁，于是乎最后就剩下孤零零的num，于是这里就产生了内存消耗的问题。</p><h2 id="12、防抖和节流"><a href="#12、防抖和节流" class="headerlink" title="12、防抖和节流"></a>12、防抖和节流</h2><p>防抖：用户一直触发某个函数，触发时间间隔如果小于设定的时间间隔，则只执行一次</p><p>节流：在设定之间间隔内执行一次</p><p>区别：防抖和节流本质是不一样的。防抖是将多次执行变为最后一次执行（停下后的最后一次才执行），节流是将多次执行变成每隔一段事件执行（会执行，且按照时间间隔执行）</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//防抖，如果有继续点击，就清除定时器</span><br><span class="line">let a = document.createElement(&quot;input&quot;)</span><br><span class="line">a.type = &quot;button&quot;</span><br><span class="line">a.value = &quot;点一下&quot;</span><br><span class="line">document.body.appendChild(a)</span><br><span class="line"></span><br><span class="line">function debounce(fn ,delay)&#123;</span><br><span class="line">  let time = null</span><br><span class="line">  return function()&#123;</span><br><span class="line">    clearTimeout(time)</span><br><span class="line">    time = setTimeout(()=&gt;&#123;</span><br><span class="line">      fn()</span><br><span class="line">    &#125;,delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function btn1() &#123;</span><br><span class="line">  console.log(&#x27;点一下&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.onclick = debounce(btn1, 500)</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//节流</span><br><span class="line">let a = document.createElement(&quot;input&quot;)</span><br><span class="line">a.type = &quot;button&quot;</span><br><span class="line">a.value = &quot;点一下&quot;</span><br><span class="line">document.body.appendChild(a)</span><br><span class="line">function debounce(fn ,delay)&#123;</span><br><span class="line">  let lastTime = 0</span><br><span class="line">  return function()&#123;</span><br><span class="line">    let nowTime = new Date().getTime()</span><br><span class="line">    if(nowTime - lastTime &gt; delay)&#123;</span><br><span class="line">      btn1()</span><br><span class="line">      lastTime = nowTime</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function btn1() &#123;</span><br><span class="line">  console.log(&#x27;点一下&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.onclick = debounce(btn1, 1000)</span><br></pre></td></tr></table></figure></blockquote><h2 id="13、nextTick"><a href="#13、nextTick" class="headerlink" title="13、nextTick"></a>13、nextTick</h2><p>定义：下一次Dom更新结束后的回调函数，（最近一次数据渲染或更新后执行）</p><p>nextTick 就是设置一个回调，用于异步执行。就是把你设置的回调放在 setTimeout 中执行，这样就算异步了，等待当时同步代码执行完毕再执行。</p><h2 id="14、JS运行机制"><a href="#14、JS运行机制" class="headerlink" title="14、JS运行机制"></a>14、JS运行机制</h2><p>JS 执⾏是单线程的， 它是基于事件循环的。 事件循环⼤致分为以下⼏个步骤：<br>（1） 所有同步任务都在主线程上执⾏， 形成⼀个执⾏栈（execution context stack） 。<br>（2） 主线程之外， 还存在⼀个”任务队列”（task queue） 。 只要异步任务有了运⾏结果， 就在”任务队列”之中放置⼀个事件。<br>（3） ⼀旦”执⾏栈”中的所有同步任务执⾏完毕， 系统就会读取”任务队列”， 看看⾥⾯有哪些事件。 那些对应的异步任务， 于是结束等待状态， 进⼊执⾏栈， 开始执⾏。<br>（4） 主线程不断重复上⾯的第三步。</p><h2 id="15、块级作用域"><a href="#15、块级作用域" class="headerlink" title="15、块级作用域"></a>15、块级作用域</h2><p>​JS 中，有三种作用域，分别为：全局作用域、函数作用域、块级作用域。<br>当执行一个项目或一个文件时，会先生成全局作用域；在执行每一个函数时，会生成对应的函数作用域；这两个作用域都是 JS 设计之初就有的，而块级作用域则是 ES6 才实现的。</p><p>正常情况下，JS 引擎在编译代码阶段会生成全局执行上下文和函数执行上下文。这其中，每个上下文又分为了两个部分：变量环境和词法环境。</p><p><img src="C:\Users\Samuel\AppData\Roaming\Typora\typora-user-images\image-20230313225724386.png" alt="image-20230313225724386"></p><p><img src="C:\Users\Samuel\AppData\Roaming\Typora\typora-user-images\image-20230313225731329.png" alt="image-20230313225731329"></p><ol><li>使用 var 关键字声明的变量、及函数声明，会被放入变量环境中</li><li>使用 let 及 const 关键字声明的变量和常量会被放入词法环境中</li><li>词法环境内部也类似于一个栈结构，每一个块结构(即有一对大括号，如条件句、循环等)内的变量和常量会单独保存(使用 var 关键字声明的不会)。</li><li>所以，如上面的例子，函数 foo 的词法环境里，有两个区域。下面的区域保存了函数体内使用 let 声明的变量，上面的区域保存了 if 语句中使用 let 声明的变量。所以即使它们都叫做 b，但却是两个不同的变量。</li></ol><p>如此一来，ES6 就通过执行上下文中的词法环境实现了块级作用域。</p><p><a href="https://www.jianshu.com/p/cdf85625450a">https://www.jianshu.com/p/cdf85625450a</a></p><h2 id="16、数据类型"><a href="#16、数据类型" class="headerlink" title="16、数据类型"></a>16、数据类型</h2><p>包括值类型(基本对象类型)和引用类型(复杂对象类型)</p><p><strong>基本类型(值类型)：</strong> Number(数字),String(字符串),Boolean(布尔),Symbol(符号),null(空),undefined(未定义)在内存中占据固定大小，保存在栈内存中</p><p><strong>引用类型(复杂数据类型)：</strong> Object(对象)、Function(函数)。其他还有Array(数组)、Date(日期)、RegExp(正则表达式)、特殊的基本包装类型(String、Number、Boolean) 以及单体内置对象(Global、Math)等 引用类型的值是对象 保存在堆内存中，栈内存存储的是对象的变量标识符以及对象在堆内存中的存储地址。</p><h2 id="17、var、let、const"><a href="#17、var、let、const" class="headerlink" title="17、var、let、const"></a>17、var、let、const</h2><p>const 基本类型不可修改，对象类型可以修改（const不可以修改栈里的地址，但可以修改堆里的数据）</p><p>let的暂时性死区（先定义再使用，拒绝变量提升）</p><p>区别：</p><p>1、var定义的变量，<code>没有块的概念，可以跨块访问</code>, 不能跨函数访问。<br> let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。<br> const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，且不能修改。</p><p>2、var可以<code>先使用，后声明</code>，因为存在变量提升；let必须先声明后使用。</p><p>3、var是允许在相同作用域内<code>重复声明同一个变量</code>的，而let与const不允许这一现象。</p><p>4、在全局上下文中，基于let声明的全局变量和全局对象GO（window）没有任何关系 ;<br> var声明的变量会和GO有映射关系；</p><p>5、<code>会产生暂时性死区</code>： 检测未申明变量时，不会报错，而是返回undefined</p><h2 id="18、JS垃圾回收机制"><a href="#18、JS垃圾回收机制" class="headerlink" title="18、JS垃圾回收机制"></a>18、JS垃圾回收机制</h2><p>​项目中，如果存在大量不被释放的内存（堆&#x2F;栈&#x2F;上下文），页面性能会变得很慢。当某些代码操作不能被合理释放，就会造成内存泄漏。我们尽可能减少使用闭包，因为它会消耗内存。</p><p>原理：浏览器的<code>Javascript</code>具有自动垃圾回收机制(<code>GC:Garbage Collecation</code>)，垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。</p><p><strong>优化手段</strong>：内存优化 ; 手动释放：取消内存的占用即可。</p><p>（1）堆内存：fn &#x3D; null 【null：空指针对象】</p><p>（2）栈内存：把上下文中，被外部占用的堆的占用取消即可。</p><p><strong>内存泄漏</strong>：在 JS 中，常见的内存泄露主要有 4 种,全局变量、闭包、DOM 元素的引用、定时器</p><h2 id="19、EventLoop-事件循环"><a href="#19、EventLoop-事件循环" class="headerlink" title="19、EventLoop 事件循环"></a>19、EventLoop 事件循环</h2><p>​JS是单线程的，为了防止一个函数执行时间过长阻塞后面的代码，所以会先将同步代码压入执行栈中，依次执行，将异步代码推入异步队列，异步队列又分为<strong>宏任务</strong>队列和<strong>微任务</strong>队列，因为宏任务队列的执行时间较长，所以微任务队列要优先于宏任务队列。微任务队列的代表就是，Promise.then，MutationObserver，宏任务的话就是setImmediate setTimeout setInterval</p><ul><li>浏览器中的事件环(event loop)</li></ul><p>事件环的运行机制是，先会执行栈中的内容，栈中的内容执行后执行微任务，微任务清空后再执行宏任务，先取出一个宏任务，再去执行微任务，然后在取宏任务清微任务这样不停的循环。</p><p>事件循环可以简单的描述为以下四个步骤:</p><ol><li>函数入栈，当Stack中执行到异步任务的时候，就将他丢给WebAPIs,接着执行同步任务,直到Stack为空；</li><li>此期间WebAPIs完成这个事件，把回调函数放入队列中等待执行（微任务放到微任务队列，宏任务放到宏任务队列）</li><li>执行栈为空时，Event Loop把微任务队列执行清空；</li><li>微任务队列清空后，进入宏任务队列，取队列的第一项任务放入Stack(栈）中执行，执行完成后，查看微任务队列是否有任务，有的话，清空微任务队列。重复4，继续从宏任务中取任务执行，执行完成之后，继续清空微任务，如此反复循环，直至清空所有的任务。</li></ol><p><strong>任务源(task):</strong></p><ul><li><code>宏任务(macrotask)</code>（不需要立即连贯执行）：<br> 宿主环境提供的，比如浏览器<br> ajax、setTimeout、setInterval、setTmmediate(只兼容ie)、script、requestAnimationFrame、messageChannel、UI渲染、一些浏览器api</li><li><code>微任务(microtask)</code>（需要立即连贯执行）：<br> 语言本身提供的，比如promise.then<br> then、queueMicrotask(基于then)、mutationObserver(浏览器提供)、messageChannel 、mutationObersve</li></ul><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303251406374.png" alt="image-20230325140635272"></p><ul><li>Node环境的事件环</li></ul><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303222258109.webp" alt="2020120317343116.png"></p><ul><li><code>timers</code>: 计时器，执行setTimeout和setInterval的回调</li><li><code>pending callbacks</code>: 执行延迟到下一个循环迭代的 I&#x2F;O 回调</li><li><code>idle, prepare</code>: 队列的移动，仅系统内部使用</li><li><code>poll轮询</code>: 检索新的 I&#x2F;O 事件;执行与 I&#x2F;O 相关的回调。事实上除了其他几个阶段处理的事情，其他几乎所有的异步都在这个阶段处理。</li><li><code>check</code>: 执行<code>setImmediate</code>回调，setImmediate在这里执行</li><li><code>close callbacks</code>: 执行<code>close</code>事件的<code>callback</code>，一些关闭的回调函数，如：socket.on(‘close’, …)</li></ul><h2 id="20、setTimeout、Promise、Async-x2F-Await-的区别"><a href="#20、setTimeout、Promise、Async-x2F-Await-的区别" class="headerlink" title="20、setTimeout、Promise、Async&#x2F;Await 的区别"></a>20、setTimeout、Promise、Async&#x2F;Await 的区别</h2><p>1、setTimeout</p><p>settimeout的回调函数放到宏任务队列里，等到执行栈清空以后执行。</p><p>2、Promise</p><p>Promise本身是<strong>同步的立即执行函数</strong>， 当在executor中执行resolve或者reject的时候, 此时是异步操作， 会先执行then&#x2F;catch等，当主栈完成后，才会去调用resolve&#x2F;reject中存放的方法执行。</p><p>3、async&#x2F;await</p><p>async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。</p><p>async&#x2F;await通过同步实现异步方法</p><p>Async&#x2F;Await就是一个<strong>自执行</strong>的generate函数。利用generate函数的特性把异步的代码写成“同步”的形式,第一个请求的返回值作为后面一个请求的参数,其中每一个参数都是一个promise对象.</p><h2 id="21、图片懒加载"><a href="#21、图片懒加载" class="headerlink" title="21、图片懒加载"></a>21、图片懒加载</h2><p>好处：减少HTTP请求，加快网页响应速度，减少服务器压力，增加用户浏览体验</p><p>原理：</p><p>1、监控滚动条滚动</p><p>2、获取总可视内容高度（可见视口高度+滚动条滚动高度）</p><p>3、获取所有图片</p><p>4、遍历步骤3（或这说：遍历伪数组）</p><p>5、在步骤4中判断，图片.offsetTop &lt;&#x3D; 步骤2 true-修改src属性为data-src、false-不管</p><p>6、 节流防抖优化</p><h2 id="22、DOM事件流"><a href="#22、DOM事件流" class="headerlink" title="22、DOM事件流"></a>22、DOM事件流</h2><p>捕获阶段：事件从Document节点自上而下向目标节点传播的阶段；<br>目标阶段：真正的目标节点正在处理事件的阶段；<br>冒泡阶段：事件从目标节点自下而上向Document节点传播的阶段。</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303241106254.png" alt="img"></p><h2 id="23、事件委托"><a href="#23、事件委托" class="headerlink" title="23、事件委托"></a>23、事件委托</h2><p>概念：事件委托也称为事件代理。就是利用事件冒泡，把子元素的事件都绑定到父元素上。如果子元素阻止了事件冒泡，那么委托就无法实现。</p><p>事件委托的好处：</p><ul><li><p>利用冒泡的原理，将事件加到父级身上，这样只在内存中开辟一块空间，既节省资源又减少DOM操作，提高性能</p></li><li><p>可以为动态添加的元素绑定事件</p></li></ul><h2 id="24、-Object构造函数上语法"><a href="#24、-Object构造函数上语法" class="headerlink" title="24、 Object构造函数上语法"></a>24、 Object构造函数上语法</h2><p>重要</p><p>Object.defineProperty() vue双向绑定原理<br>Object.keys() 获取对象的所有键 返回数组<br>Object.values() 获取对象的所有值 返回数据<br>Object.create() 创建对象（特色 基于指定原型造对象 场景1：new原理优化，场景2：vue ）<br>Object.assign() 合并对象<br>Object.prototype.constructor 所属构造函数<br>Object.prototype.toString() 转字符串</p><h2 id="25、Dom操作"><a href="#25、Dom操作" class="headerlink" title="25、Dom操作"></a>25、Dom操作</h2><ul><li><p>获取：<br>getElementById() 通过id获取dom节点<br>getElementByTagName() 通过标签名获取dom节点<br>getElementByClassName() 通过类名获取dom节点<br>querySelector() 通过css选择器获取第一个符合的dom节点<br>querySelectorAll() 通过css选择器获取所有符合的dom节点，结果是一个伪数组</p></li><li><p>操作：<br>el.getAttribute() 获取el的属性<br>el.setAttribute() 设置el的属性<br>el.removeAttribute() 删除el的属性<br>元素节点上有一个dataset，里面包含了所有的H5自定义属性<br>el.dataset.属性名 获取H5自定义属性值<br>el.dataset.属性名 &#x3D; “值” 设值<br>delete el.dataset.属性名 删除<br>el.innerHTML 元素的可读写属性，里面的HTML代码可以被解析<br>el.innerText 元素的文本内容，里面的HTML代码打印出来是字符串<br>el.value 用于操作表单元素的内容</p></li></ul><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="1、三次握手、四次挥手"><a href="#1、三次握手、四次挥手" class="headerlink" title="1、三次握手、四次挥手"></a>1、三次握手、四次挥手</h2><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303202145313.png"></p><p>第一次握手：<code>建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认</code>；SYN：同步序列编号（Synchronize Sequence Numbers）。</p><p>第二次握手：<code>服务器收到syn包并确认客户的SYN</code>（ack&#x3D;j+1），<code>同时也发送一个自己的SYN包</code>（syn&#x3D;k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p><p>第三次握手：<code>客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1）</code>，此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p><p><strong>SYN：用于建立连接。</strong> <strong>ACK：用于确定收到了请求。</strong> <strong>seq：发送自己的数据。</strong> <strong>FIN表示关闭连接</strong></p><p><strong>ack：发送接收到的对方的数据</strong></p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303202148573.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303202200254.png" alt="img"></p><p>四次挥手原理：</p><p>第1次挥手：客户端发送一个FIN，用来关闭客户端到服务端的数据传送，客户端进入FIN_WAIT_1状态；</p><p>第2次挥手：服务端收到FIN后，发送一个ACK给客户端，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），服务端进入CLOSE_WAIT状态；</p><p>第3次挥手：服务端发送一个FIN，用来关闭服务端到客户端的数据传送，服务端进入LAST_ACK状态；</p><p>第4次挥手：客户端收到FIN后，客户端t进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，服务端进入CLOSED状态，完成四次挥手。</p><p>其中：FIN标志位数置1，表示断开TCP连接。</p><h2 id="2、TCP和UDP"><a href="#2、TCP和UDP" class="headerlink" title="2、TCP和UDP"></a>2、TCP和UDP</h2><p>1、TCP是面向<code>连接</code>的，而UDP是面向报文的。</p><p>2、TCP仅支持<code>单播传输</code>，UDP 提供了单播，多播，广播的功能。</p><p>3、TCP的三次握手保证了连接的<code>可靠性</code>; UDP是无连接的、不可靠的一种数据传输协议，首先不可靠性体现在无连接上，通信都不需要建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收。</p><p>4、UDP的<code>头部开销</code>比TCP的更小，数据<code>传输速率更高</code>，<code>实时性更好</code>。</p><h2 id="3、HTTP跨域请求解决方案"><a href="#3、HTTP跨域请求解决方案" class="headerlink" title="3、HTTP跨域请求解决方案"></a>3、HTTP跨域请求解决方案</h2><ul><li>原理：</li></ul><p><strong>跨域</strong>，是指浏览器不能执行其他网站的脚本。它是由浏览器的<code>同源策略</code>造成的。<br><strong>同源策略</strong>,是浏览器对 JavaScript 实施的安全限制，只要<code>协议、域名、端口</code>有任何一个不同，都被当作是不同的域。<br><strong>跨域原理</strong>，即是通过各种方式，<code>避开浏览器的安全限制</code>。</p><ul><li>解决方法</li></ul><p><strong>1、JSONP</strong></p><p>方法：当需要跨域请求时，不使用AJAX，转而生成一个script元素去请求服务器，由于浏览器并不阻止script元素的请求，这样请求可以到达服务器。服务器拿到请求后，响应一段JS代码，这段代码实际上是一个函数调用，调用的是客户端预先生成好的函数，并把浏览器需要的数据作为参数传递到函数中，从而间接的把数据传递给客户端。</p><p>步骤：</p><ol><li>去创建一个script标签</li><li>script的src属性设置接口地址</li><li>接口参数，必须要带一个自定义函数名，要不然后台无法返回数据</li><li>通过定义函数名去接受返回的数据</li></ol><p>缺点：JSON 只支持 get，因为 script 标签只能使用 get 请求； JSONP 需要后端配合返回指定格式的数据。</p><p><strong>2、CORS</strong> </p><p>CORS(Cross-origin resource sharing)跨域资源共享 服务器设置对CORS的支持原理：服务器设置Access-Control-Allow-Origin HTTP响应头之后，浏览器将会允许跨域请求</p><p><strong>3、Proxy代理</strong></p><p>代理就是，比如你通过域A访问域B，那么在域A中架设一台代理服务器，把请求转发到域B，然后浏览器访问域A即可，这其中不涉及到跨域访问了。</p><p>前端后端分离开发时经常会用到这个特性，在本地架设一个代理服务器，以免浏览器无法跨域访问api。</p><p>例如：有一个天气预报页面<a href="https://links.jianshu.com/go?to=http://www.a.com">http://www.a.com</a>，需要向<a href="https://links.jianshu.com/go?to=http://www.weather.com">http://www.weather.com</a>接口获取天气数据，但是这个接口不支持JSONP和CORS跨域，那么可以这样做：</p><ol><li>搭建服务器，创建一个获取天气的接口<a href="https://links.jianshu.com/go?to=http://www.b.com">http://www.b.com</a></li><li>设置接口<a href="https://links.jianshu.com/go?to=http://www.b.com">http://www.b.com</a>的响应头<code>Access-Control-Allow-Origin:http://www.a.com</code></li><li>页面<a href="https://links.jianshu.com/go?to=http://www.a.com">http://www.a.com</a>向<a href="https://links.jianshu.com/go?to=http://www.b.com">http://www.b.com</a>发请求</li><li><a href="https://links.jianshu.com/go?to=http://www.b.com">http://www.b.com</a>收到请求后，向<a href="https://links.jianshu.com/go?to=http://www.weather.com">http://www.weather.com</a>获取天气数据，然后将天气数据返回给<a href="https://links.jianshu.com/go?to=http://www.a.com">http://www.a.com</a></li></ol><h2 id="4、输入URL到加载页面的过程"><a href="#4、输入URL到加载页面的过程" class="headerlink" title="4、输入URL到加载页面的过程"></a>4、输入URL到加载页面的过程</h2><p>1、URL解析：判断浏览器输入的是搜索内容还是URL；</p><p>2、查找缓存：如果能找到缓存则直接返回页面，如果没有缓存则需要发送网络请求页面；</p><p>3、DNS域名解析；</p><p>4、三次握手建立TCP连接；</p><p>5、发起HTTP请求；</p><p>6、服务器响应并返回结果；</p><p>7、通过四次握手释放TCP连接；</p><p>8、浏览器渲染；</p><p>9、js引擎解析</p><h2 id="5、常见状态码"><a href="#5、常见状态码" class="headerlink" title="5、常见状态码"></a>5、常见状态码</h2><p>1xx（临时响应）<br>表示临时响应并需要请求者继续执行操作的状态码。</p><table><thead><tr><th>100（继续）</th><th>请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</th></tr></thead><tbody><tr><td>101（切换协议）</td><td>请求者已要求服务器切换协议，服务器已确认并准备切换。</td></tr></tbody></table><p>2xx （成功）</p><p>表示成功处理了请求的状态码。</p><table><thead><tr><th>200（成功）</th><th>服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。如果是对您的 robots.txt 文件显示此状态码，则表示 Googlebot 已成功检索到该文件。</th></tr></thead><tbody><tr><td>201（已创建）</td><td>请求成功并且服务器创建了新的资源。</td></tr><tr><td>202（已接受）</td><td>服务器已接受请求，但尚未处理。</td></tr><tr><td>203（非授权信息）</td><td>服务器已成功处理了请求，但返回的信息可能来自另一来源。</td></tr><tr><td>204（无内容）</td><td>服务器成功处理了请求，但没有返回任何内容。</td></tr><tr><td>205（重置内容）</td><td>服务器成功处理了请求，但没有返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图（例如，清除表单内容以输入新内容）。</td></tr><tr><td>206（部分内容）</td><td>服务器成功处理了部分 GET 请求。</td></tr></tbody></table><p>3xx （<a href="https://so.csdn.net/so/search?q=%E9%87%8D%E5%AE%9A%E5%90%91&spm=1001.2101.3001.7020">重定向</a>）<br>要完成请求，需要进一步操作。通常，这些状态码用来重定向。Google 建议您在每次请求中使用重定向不要超过 5 次。您可以使用网站管理员工具查看一下 Googlebot 在抓取重定向网页时是否遇到问题。诊断下的<a href="http://www.google.cn/support/webmasters/bin/answer.py?answer=35156">网络抓取</a>页列出了由于重定向错误导致 Googlebot 无法抓取的网址。</p><table><thead><tr><th>300（多种选择）</th><th>针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</th></tr></thead><tbody><tr><td>301（永久移动）</td><td>请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置。</td></tr><tr><td>302（临时移动）</td><td>服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。</td></tr><tr><td>303（查看其他位置）</td><td>请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。对于除 HEAD 之外的所有请求，服务器会自动转到其他位置。</td></tr><tr><td>304（未修改）</td><td>自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改过，您应将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。服务器可以告诉 Googlebot 自从上次抓取后网页没有变更，进而节省带宽和开销。</td></tr><tr><td>305（使用代理）</td><td>请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</td></tr><tr><td>307（临时重定向）</td><td>服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 &lt;a href&#x3D;answer.py?answer&#x3D;&gt;301</a> 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个页面或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。</td></tr></tbody></table><p>4xx（请求错误）<br>这些状态码表示请求可能出错，妨碍了服务器的处理。</p><table><thead><tr><th>400（错误求）</th><th>服务器不理解请求的语法。</th></tr></thead><tbody><tr><td>401（未授权）</td><td>请求要求身份验证。对于登录后请求的网页，服务器可能返回此响应。</td></tr><tr><td>403（禁止）</td><td>服务器拒绝请求。如果您在 Googlebot 尝试抓取您网站上的有效网页时看到此状态码（您可以在 Google 网站管理员工具诊断下的网络抓取页面上看到此信息），可能是您的服务器或主机拒绝了 Googlebot 访问。</td></tr><tr><td>404（未找到）</td><td>服务器找不到请求的网页。例如，对于服务器上不存在的网页经常会返回此代码。如果您的网站上没有 robots.txt 文件，而您在 Google 网站管理员工具<a href="http://www.google.cn/support/webmasters/bin/answer.py?answer=35237">“诊断”标签的 robots.txt 页</a>上看到此状态码，则这是正确的状态码。但是，如果您有 robots.txt 文件而又看到此状态码，则说明您的 robots.txt 文件可能命名错误或位于错误的位置（该文件应当位于顶级域，名为 robots.txt）。如果对于 Googlebot 抓取的网址看到此状态码（在”诊断”标签的 <a href="http://www.google.cn/support/webmasters/bin/answer.py?answer=35122">HTTP 错误页面</a>上），则表示 Googlebot 跟随的可能是另一个页面的无效链接（是旧链接或输入有误的链接）。</td></tr><tr><td>405（方法禁用）</td><td>禁用请求中指定的方法。</td></tr><tr><td>406（不接受）</td><td>无法使用请求的内容特性响应请求的网页。</td></tr><tr><td>407（需要代理授权）</td><td>此状态码与 &lt;a href&#x3D;answer.py?answer&#x3D;35128&gt;401（未授权）</a>类似，但指定请求者应当授权使用代理。如果服务器返回此响应，还表示请求者应当使用代理。</td></tr><tr><td>408（请求超时）</td><td>服务器等候请求时发生超时。</td></tr><tr><td>409（冲突）</td><td>服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息。服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，以及两个请求的差异列表。</td></tr><tr><td>410（已删除）</td><td>如果请求的资源已永久删除，服务器就会返回此响应。该代码与 404（未找到）代码类似，但在资源以前存在而现在不存在的情况下，有时会用来替代 404 代码。如果资源已永久移动，您应使用 301 指定资源的新位置。</td></tr><tr><td>411（需要有效长度）</td><td>服务器不接受不含有效内容长度标头字段的请求。</td></tr><tr><td>412（未满足前提条件）</td><td>服务器未满足请求者在请求中设置的其中一个前提条件。</td></tr><tr><td>413（请求实体过大）</td><td>服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</td></tr><tr><td>414（请求的 URI 过长）</td><td>请求的 URI（通常为网址）过长，服务器无法处理。</td></tr><tr><td>415（不支持的媒体类型）</td><td>请求的格式不受请求页面的支持。</td></tr><tr><td>416（请求范围不符合要求）</td><td>如果页面无法提供请求的范围，则服务器会返回此状态码。</td></tr><tr><td>417（未满足期望值）</td><td>服务器未满足”期望”请求标头字段的要求。</td></tr></tbody></table><p>5xx（服务器错误）<br>这些状态码表示服务器在处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。</p><table><thead><tr><th>500（服务器内部错误）</th><th>服务器遇到错误，无法完成请求。</th></tr></thead><tbody><tr><td>501（尚未实施）</td><td>服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。</td></tr><tr><td>502（错误网关）</td><td>服务器作为网关或代理，从上游服务器收到无效响应。</td></tr><tr><td>503（服务不可用）</td><td>服务器目前无法使用（由于超载或停机维护）。通常，这只是暂时状态。</td></tr><tr><td>504（网关超时）</td><td>服务器作为网关或代理，但是没有及时从上游服务器收到请求。</td></tr><tr><td>505（HTTP 版本不受支持）</td><td>服务器不支持请求中所用的 HTTP 协议版本。</td></tr></tbody></table><h2 id="6、get和post有什么区别"><a href="#6、get和post有什么区别" class="headerlink" title="6、get和post有什么区别"></a>6、get和post有什么区别</h2><p>GET在浏览器回退时是无害的，而POST会再次提交请求。</p><p>GET产生的URL地址可以被Bookmark，而POST不可以。</p><p>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</p><p>GET请求只能进行url编码，而POST支持多种编码方式。</p><p>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</p><p>GET请求在URL中传送的参数是有长度限制的，而POST么有。</p><p>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</p><p>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</p><p>GET参数通过URL传递，POST放在Request body中。</p><h2 id="7、异步请求"><a href="#7、异步请求" class="headerlink" title="7、异步请求"></a>7、异步请求</h2><h1 id="HTML、CSS"><a href="#HTML、CSS" class="headerlink" title="HTML、CSS"></a>HTML、CSS</h1><h2 id="1、HTML语义化"><a href="#1、HTML语义化" class="headerlink" title="1、HTML语义化"></a>1、HTML语义化</h2><p>HTML5的语义化指的是<code>合理正确的使用语义化的标签来创建页面结构</code>。</p><p>语义化优点：</p><ul><li>在<code>没CSS样式的情况下，页面整体也会呈现很好的结构效果</code></li><li><code>代码结构清晰</code>，易于阅读，</li><li><code>利于开发和维护</code> 方便其他设备解析（如屏幕阅读器）根据语义渲染网页。</li><li><code>有利于搜索引擎优化（SEO）</code>，搜索引擎爬虫会根据不同的标签来赋予不同的权重</li></ul><h2 id="2、CSS选择器"><a href="#2、CSS选择器" class="headerlink" title="2、CSS选择器"></a>2、CSS选择器</h2><p>选择器类型：</p><p><strong>选择器：</strong></p><ul><li>id选择器(#myid)</li><li>类选择器(.myclass)</li><li>属性选择器(a[rel&#x3D;”external”])</li><li>伪类选择器(a:hover, li:nth-child)</li><li>标签选择器(div, h1,p)</li><li>相邻选择器（h1 + p）</li><li>子选择器(ul &gt; li)</li><li>后代选择器(li a)</li><li>通配符选择器(*)</li></ul><p><strong>优先级：</strong></p><ul><li><code>!important</code></li><li>内联样式（1000）</li><li>ID选择器（0100）</li><li>类选择器&#x2F;属性选择器&#x2F;伪类选择器（0010）</li><li>元素选择器&#x2F;伪元素选择器（0001）</li><li>关系选择器&#x2F;通配符选择器（0000）</li></ul><h2 id="3、position属性"><a href="#3、position属性" class="headerlink" title="3、position属性"></a>3、position属性</h2><p><strong>固定定位 fixed</strong>： 元素的位置相对于浏览器窗口是固定位置，即使窗口是滚动的它也不会移动。Fixed 定 位使元素的位置与文档流无关，因此不占据空间。 Fixed 定位的元素和其他元素重叠。</p><p><strong>相对定位 relative</strong>： 如果对一个元素进行相对定位，它将出现在它所在的位置上。然后，可以通过设置垂直 或水平位置，让这个元素“相对于”它的起点进行移动。 在使用相对定位时，无论是 否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框。</p><p><strong>绝对定位 absolute</strong>： 绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那 么它的位置相对于。absolute 定位使元素的位置与文档流无关，因此不占据空间。 absolute 定位的元素和其他元素重叠。</p><p><strong>粘性定位 sticky</strong>： 元素先按照普通文档流定位，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。而后，元素定位表现为在跨越特定阈值前为相对定 位，之后为固定定位。</p><p><strong>默认定位 Static</strong>： 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。inherit: 规定应该从父元素继承 position 属性的值。</p><h2 id="4、box-sizing属性"><a href="#4、box-sizing属性" class="headerlink" title="4、box-sizing属性"></a>4、box-sizing属性</h2><p>box-sizing 属性定义如何计算一个元素的总宽度和总高度，主要设置是否需要加上内边距(padding)和边框等。</p><p>content-box：指定盒模型为 W3C 标准模型，设置 border、padding 会增加元素 width与 height 的尺寸。</p><p>border-box：指定盒模型为 IE模型（怪异模式），设置 border、padding 不会影响元素 width 与 height 的尺寸。</p><h2 id="5、CSS盒子模型"><a href="#5、CSS盒子模型" class="headerlink" title="5、CSS盒子模型"></a>5、CSS盒子模型</h2><p>CSS 盒模型本质上是一个盒子，它包括：边距，边框，填充和实际内容。CSS 中的盒子模型包括标准盒模型和怪异盒模型</p><p>标准盒模型： 一个块的总宽度 &#x3D; width+margin(左右)+padding(左右)+border(左右) </p><p>怪异盒模型：一个块的总宽度 &#x3D; width+margin（左右）（既 width 已经包含了 padding 和 border 值）</p><h2 id="6、BFC"><a href="#6、BFC" class="headerlink" title="6、BFC"></a>6、BFC</h2><p>定义：块级格式化上下文，独立的渲染区域，这个区域的子元素不会影响到外面的元素</p><p>形成的条件：a.浮动 b. 非静态定位，c. overflow:hidden d. display:table </p><p>解决的问题：a. 浮动元素重叠（让父元素的高度包含子浮动元素） b. 父元素高度塌陷 b. margin重叠</p><h2 id="7、居中"><a href="#7、居中" class="headerlink" title="7、居中"></a>7、居中</h2><p><strong>水平居中</strong></p><ul><li><p>对于 行内元素 : <code>text-align: center</code>;</p></li><li><p>对于确定宽度的块级元素：</p><p>（1）width和margin实现。<code>margin: 0 auto</code>;</p><p>（2）绝对定位和margin-left: (父width - 子width）&#x2F;2, 前提是父元素position: relative</p></li><li><p>对于宽度未知的块级元素</p><p>（1）<code>table标签配合margin左右auto实现水平居中</code>。使用table标签（或直接将块级元素设值为 display:table），再通过给该标签添加左右margin为auto。</p><p>（2）inline-block实现水平居中方法。display：inline-block和text-align:center实现水平居中。</p><p>（3）<code>绝对定位+transform</code>，设置元素相对父级定位<code>position:absolute;left:50%;top:50%</code>，让自身平移自身高度50% ，然后<code>transform:translate(-50%,-50%)</code>，这种方式兼容性好，被广泛使用的一种方式</p><p>（4）flex布局使用<code>justify-content:center</code></p></li></ul><p><strong>垂直居中</strong></p><ol><li>利用 <code>line-height</code> 实现居中，这种方法适合纯文字类</li><li>通过设置父容器 相对定位 ，子级设置 <code>绝对定位</code>，然后top、left、right、bottom设为0，标签通过margin实现自适应居中</li><li>弹性布局 flex :父级设置display: flex; 子级设置margin为auto实现自适应居中</li><li>父级设置相对定位，子级设置绝对定位，并且通过位移 transform 实现</li><li><code>table 布局</code>，父级通过转换成表格形式，<code>然后子级设置 vertical-align 实现</code>。（需要注意的是：vertical-align: middle使用的前提条件是内联元素以及display值为table-cell的元素）。</li></ol><h2 id="8、隐藏页面中某元素"><a href="#8、隐藏页面中某元素" class="headerlink" title="8、隐藏页面中某元素"></a>8、隐藏页面中某元素</h2><p>1.<code>opacity：0</code>，该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定 一些事件，如click 事件，那么点击该区域，也能触发点击事件的</p><p>2.<code>visibility：hidden</code>，该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已 经绑定的事件 ，隐藏对应元素，在文档布局中仍保留原来的空间（重绘）</p><p>3.<code>display：none</code>，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素。 不显示对应的元素，在文档布局中不再分配空间（回流+重绘）</p><h2 id="9、页面布局"><a href="#9、页面布局" class="headerlink" title="9、页面布局"></a>9、页面布局</h2><ul><li>Flex</li></ul><p>容器的属性：</p><ul><li>flex-direction：决定主轴的方向（即子 item 的排列方法）flex-direction: row | row-reverse | column | column-reverse;</li><li>flex-wrap：决定换行规则 flex-wrap: nowrap （不换）| wrap（超出就换） | wrap-reverse（和warp相反）;</li><li>flex-flow： .box { flex-flow: || ; }</li><li>justify-content：对其方式，水平主轴对齐方式</li><li>align-items：对齐方式，副轴线方向，适用于单行</li><li>align-content：同align-items，不过适用于多行</li></ul><p>项目的属性（元素的属性）：</p><ul><li>order 属性：定义项目的排列顺序，顺序越小，排列越靠前，默认为 0</li><li>flex-grow 属性：定义项目的放大比例，即使存在空间，也不会放大</li><li>flex-shrink 属性：定义了项目的缩小比例，当空间不足的情况下会等比例的缩小，如果 定义个 item 的 flow-shrink 为 0，则为不缩小</li><li>flex-basis 属性：定义了在分配多余的空间，项目占据的空间。</li><li>flex：是 flex-grow 和 flex-shrink、flex-basis 的简写，默认值为 0 1 auto。</li><li>align-self：允许单个项目与其他项目不一样的对齐方式，可以覆盖</li><li>align-items，默认属 性为 auto，表示继承父元素的 align-items 比如说，用 flex 实现圣杯布局</li></ul><ul><li>rem布局</li></ul><p>首先 Rem 相对于根(html)的 font-size 大小来计算。简单的说它就是一个相对单例 如:font-size:10px;,那么（1rem &#x3D; 10px）了解计算原理后首先解决怎么在不同设备上设置 html 的 font-size 大小。其实 rem 布局的本质是等比缩放，一般是基于宽度。</p><p><strong>优点</strong>：可以快速适用移动端布局，字体，图片高度</p><p><strong>缺点</strong>：</p><p>①目前 ie 不支持，对 pc 页面来讲使用次数不多；<br> ②数据量大：所有的图片，盒子都需要我们去给一个准确的值；才能保证不同机型的适配；<br> ③在响应式布局中，必须通过 js 来动态控制根元素 font-size 的大小。也就是说 css 样式和 js 代码有一定的耦合性。且必须将改变 font-size 的代码放在 css 样式之前。</p><ul><li>百分比布局</li></ul><p>​流式布局，就是百分比布局，也称非固定像素布局。通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。流式布局方式是移动web开发使用的比较常见的布局方式。</p><p>​通过百分比单位 “ % “ 来实现响应式的效果。通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。 直观的理解，我们可能会认为子元素的百分比完全相对于直接父元素，height 百分比相 对于 height，width 百分比相对于 width。 padding、border、margin 等等不论是垂直方向还是水平方向，都相对于直接父元素的 width。 除了 border-radius 外，还有比如 translate、background-size 等都是相对于自身的。</p><p><strong>缺点</strong>：</p><p>（1）计算困难<br> （2）各个属性中如果使用百分比，相对父元素的属性并不是唯一的。造成我们使用百分比单位容易使布局问题变得复杂。</p><ul><li>浮动布局</li></ul><p>浮动布局:当元素浮动以后可以向左或向右移动，直到它的外边缘碰到包含它的框或者另外一个浮动元素的边框为止。元素浮动以后会脱离正常的文档流，所以文档的普通流中的框就变的好像浮动元素不存在一样。</p><p><strong>优点</strong></p><p>这样做的优点就是在图文混排的时候可以很好的使文字环绕在图片周围。另外当元素浮动了起来之后，它有着块级元素的一些性质例如可以设置宽高等，但它与inline-block还是有一些区别的，第一个就是关于横向排序的时候，float可以设置方向而inline-block方向是固定的；还有一个就是inline-block在使用时有时会有空白间隙的问题</p><p><strong>缺点</strong></p><p>最明显的缺点就是浮动元素一旦脱离了文档流，就无法撑起父元素，<code>会造成父级元素高度塌陷</code>。</p><p>清除浮动方法：</p><p>1、添加额外标签清除浮动。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;f&quot;&gt;&lt;/div&gt;</span><br><span class="line">    //添加额外标签并且添加clear属性</span><br><span class="line">    &lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>2、父元素设置<code>overflow:hidden</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;parent&quot; style=&quot;overflow:hidden&quot;&gt;</span><br><span class="line">    //将父元素的overflow设置为hidden</span><br><span class="line">    &lt;div class=&quot;f&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>3、父元素设置<code>overflow:auto</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;parent&quot; style=&quot;overflow:auto&quot;&gt;</span><br><span class="line">    //将父元素的overflow设置为hidden</span><br><span class="line">    &lt;div class=&quot;f&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>4、父元素也设置为浮动元素</p><p>5、使用伪元素<code>:after</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//在css中添加:after伪元素</span><br><span class="line">.parent:after&#123;</span><br><span class="line">    content:&quot;&quot;;</span><br><span class="line">    visibility:hidden;</span><br><span class="line">    display:block;</span><br><span class="line">    width:100%;</span><br><span class="line">    height:0;</span><br><span class="line">    clear:both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;f&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="10、重排和重绘"><a href="#10、重排和重绘" class="headerlink" title="10、重排和重绘"></a>10、重排和重绘</h2><p><code>重排/回流（Reflow）</code>：当<code>DOM</code>的变化影响了元素的几何信息，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。表现为重新生成布局，重新排列元素。</p><p><code>重绘(Repaint)</code>: 当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘。表现为某些元素的外观被改变。</p><ul><li>如何触发重排和重绘？</li></ul><p>添加、删除、更新DOM节点</p><p>通过display: none隐藏一个DOM节点-触发重排和重绘</p><p>通过visibility: hidden隐藏一个DOM节点-只触发重绘，因为没有几何变化</p><p>移动或者给页面中的DOM节点添加动画</p><p>添加一个样式表，调整样式属性</p><p>用户行为，例如调整窗口大小，改变字号，或者滚动。</p><ul><li>如何避免重绘和重排</li></ul><p>JavaScript优化法<br>（1）避免频繁操作样式，最好一次性重写style属性，或者将样式列表定义为class并一次性更改class属性。<br>（2）避免频繁操作DOM，创建一个documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中，也就是虚拟DOM<br>（3）避免频繁读取会引发回流&#x2F;重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。<br>CSS优化法<br>（1）使用 transform 替代 top<br>（2）使用 visibility 替换 display: none ，因为前者只会引起重绘，后者会引发回流（改变了布局 （3）避免使用table布局，可能很小的一个小改动会造成整个 table 的重新布局。<br>（4）尽可能在DOM树的最末端改变class，回流是不可避免的，但可以减少其影响。尽可能在DOM树的最末端改变class，可以限制了回流的范围，使其影响尽可能少的节点。<br>（5）避免设置多层内联样式，CSS 选择符从右往左匹配查找，避免节点层级过多。<br>（6）将动画效果应用到position属性为absolute或fixed的元素上，避免影响其他元素的布局，这样只是一个重绘，而不是回流，同时，控制动画速度可以选择 requestAnimationFrame，详见探讨 requestAnimationFrame。<br>（7）避免使用CSS表达式，可能会引发回流。<br>（8）将频繁重绘或者回流的节点设置为图层，图层能够阻止该节点的渲染行为影响别的节点，例如will-change、video、iframe等标签，浏览器会自动将该节点变为图层。<br>（9）CSS3 硬件加速（GPU加速），使用css3硬件加速，可以让transform、opacity、filters这些动画不会引起回流重绘 。但是对于动画的其它属性，比如background-color这些，还是会引起回流重绘的，不过它还是可以提升这些动画的性能。</p><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="1、SPA和MVC和MVVM"><a href="#1、SPA和MVC和MVVM" class="headerlink" title="1、SPA和MVC和MVVM"></a>1、SPA和MVC和MVVM</h2><p>1、SPA：整个项目只有一个html文件，路由切换进行页面切换</p><p>优点：</p><p>​一、用户体验及交互比较流畅</p><p>​二、提取组件开发，易于后期维护</p><p>​三、减轻服务器压力</p><p>缺点：</p><p>​一、不利于SEO优化（搜索引擎优化），搜索引擎爬虫只会爬html，不会爬js</p><p>​二、第一次进入比较慢（已有按需加载策略）</p><p>2、MVC和MVVM架构</p><p>​一、MVC：View接受用户行为通知controller，controller通知model进行数据更新</p><p>​Model通过View进行页面更新</p><p>​Model和View进行交互</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303111708141.png" alt="image-20230311170844026"></p><p>​二、MVVM：数据双向绑定</p><p>​<code>视图模型双向绑定</code>，是<code>Model-View-ViewModel</code>的缩写，也就是把<code>MVC</code>中的<code>Controller</code>演变成<code>ViewModel。Model</code>层代表数据模型，<code>View</code>代表UI组件，<code>ViewModel</code>是<code>View</code>和<code>Model</code>层的桥梁，数据会绑定到<code>viewModel</code>层并自动将数据渲染到页面中，视图变化的时候会通知<code>viewModel</code>层更新数据。以前是操作DOM结构更新视图，现在是<code>数据驱动视图</code>。</p><p><strong>Observer（数据监听器）</strong> : Observer的核心是通过Object.defineProprtty()来监听数据的变动，这个函数内部可以定义setter和getter，每当数据发生变化，就会触发setter。这时候Observer就要通知订阅者，订阅者就是Watcher</p><p><strong>Watcher（订阅者）</strong> : Watcher订阅者作为Observer和Compile之间通信的桥梁，主要做的事情是：</p><ol><li>在自身实例化时往属性订阅器(dep)里面添加自己</li><li>自身必须有一个update()方法</li><li>待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调</li></ol><p><strong>Compile（指令解析器）</strong> : Compile主要做的事情是解析模板指令，将模板中变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加鉴定数据的订阅者，一旦数据有变动，收到通知，更新试图</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303231547636.png" alt="img"></p><p>​用户行为更改数据，数据可以主动触发视图更新</p><p>​双向绑定通过ViewModel进行交互</p><p>​Model和View不直接进行交互</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303111712276.png" alt="image-20230311171248215"></p><h2 id="2、vue2-x2F-3生命周期"><a href="#2、vue2-x2F-3生命周期" class="headerlink" title="2、vue2&#x2F;3生命周期"></a>2、vue2&#x2F;3生命周期</h2><p><strong>Vue2</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">     &#123;msg&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &lt;button id=&quot;btn&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"> const app = new Vue(&#123;</span><br><span class="line">     el:&quot;#app&quot;,</span><br><span class="line">     data: &#123;</span><br><span class="line">         msg:&quot;你好！&quot;,</span><br><span class="line">         msg2:&quot;不好！&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">     beforeCreate() &#123;</span><br><span class="line">         console.log(&quot;beforeCreate,挂载了vue实例的方法，但data还没挂载&quot;, this.msg)</span><br><span class="line">     &#125;,</span><br><span class="line">     created() &#123;</span><br><span class="line">         console.log(&quot;created, 挂载了data&quot;, this.msg)</span><br><span class="line">     &#125;,</span><br><span class="line">     beforeMount() &#123;</span><br><span class="line">         console.log(&quot;data没有渲染到页面&quot;, document.getElementById(&quot;app&quot;).innerHTML)</span><br><span class="line">     &#125;,</span><br><span class="line">     mounted() &#123;</span><br><span class="line">         console.log(&quot;mounted data渲染到了页面&quot;, document.getElementById(&quot;app&quot;).innerHTML)</span><br><span class="line">         setTimeout(() =&gt; &#123;</span><br><span class="line">             this.msg = &quot;hello!&quot;</span><br><span class="line">         &#125;, 2000);</span><br><span class="line">     &#125;,</span><br><span class="line">     beforeUpdate() &#123;</span><br><span class="line">         console.log(&quot;beforeUpdate数据更改直到DOM更改之前&quot;, document.getElementById(&quot;app&quot;).innerHTML)//只有数据更变(data中)和dom更改(div中)两个条件都达成了，才会触发update</span><br><span class="line">     &#125;,</span><br><span class="line">     updated() &#123;</span><br><span class="line">         console.log(&quot;update数据更改导致DOM更改之后&quot;, document.getElementById(&quot;app&quot;).innerHTML)//只有数据更变和dom更改两个条件都达成了，才会触发update</span><br><span class="line">     &#125;,</span><br><span class="line">     beforeDestroy() &#123;</span><br><span class="line">         console.log(&quot;beforeDestroy!&quot;)</span><br><span class="line">     &#125;,</span><br><span class="line">     destroyed() &#123;</span><br><span class="line">         console.log(&quot;destroyed!&quot;)</span><br><span class="line">     &#125;,</span><br><span class="line"> &#125;)</span><br><span class="line"> document.getElementById(&quot;btn&quot;).onclick = () =&gt; &#123;</span><br><span class="line">     app.$destroy()</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote><p>建议运行感受一哈！</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303111826919.png" alt="image-20230311182622845"></p><p><strong>Vue3</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">     &#123;msg&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"> const &#123;createApp, onBeforeMount, onMounted, onBeforeUpdate, onUpdated, onBeforeUnmount, onUnmounted, ref&#125; = Vue</span><br><span class="line"> const app = createApp(&#123;</span><br><span class="line">     //vue3 删除了beforeCreate created 用 setup代替</span><br><span class="line">     //destroy 改为了 unmount</span><br><span class="line">     setup:(props) =&gt; &#123;</span><br><span class="line">         msg = ref(&quot;Hi~~~&quot;)</span><br><span class="line">         console.log(&#x27;data没有渲染页面噢！&#x27;)</span><br><span class="line">         onBeforeMount(()=&gt;&#123;</span><br><span class="line">             console.log(&quot;onBeforeMount data没有渲染到页面&quot;, document.getElementById(&quot;app&quot;).innerHTML)</span><br><span class="line">         &#125;),</span><br><span class="line">         onMounted(()=&gt;&#123;</span><br><span class="line">             console.log(&quot;onMounted data渲染到了页面&quot;, document.getElementById(&quot;app&quot;).innerHTML)</span><br><span class="line">             setTimeout(() =&gt; &#123;</span><br><span class="line">                 msg.value = &quot;hello!&quot;</span><br><span class="line">             &#125;, 2000);</span><br><span class="line">         &#125;),</span><br><span class="line">         onBeforeUpdate(() =&gt; &#123;</span><br><span class="line">             console.log(&quot;更新前&quot;)</span><br><span class="line">         &#125;),</span><br><span class="line">         onUpdated(() =&gt; &#123;</span><br><span class="line">             console.log(&quot;更新后&quot;)</span><br><span class="line">         &#125;),</span><br><span class="line">         onBeforeUnmount(() =&gt; &#123;</span><br><span class="line">             console.log(&quot;销毁前&quot;)</span><br><span class="line">         &#125;),</span><br><span class="line">         onUnmounted(() =&gt; &#123;</span><br><span class="line">             console.log(&quot;销毁后&quot;)</span><br><span class="line">         &#125;)</span><br><span class="line">         return &#123;msg&#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;).mount(&quot;#app&quot;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303111827410.png" alt="image-20230311182721353"></p><h2 id="3、watch和computed"><a href="#3、watch和computed" class="headerlink" title="3、watch和computed"></a>3、watch和computed</h2><p><strong>computed</strong>：计算属性，计算出一个结果，函数值改变会导致重新计算</p><p>1、初始化的时候会自动计算一次</p><p>2、computed会读取缓存数据，后面不改变值的话，就会取用缓存数据</p><p><strong>watch</strong>：监控某个数据，被监控的数据更改，则watch执行</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;ref , computed, watch,onMounted&#125; from &quot;vue&quot;</span><br><span class="line">const num1 = ref(1)</span><br><span class="line">// computed: 计算属性，计算出一个结果，函数值改变会导致重新计算</span><br><span class="line">// 初始化的时候会自动计算一次</span><br><span class="line">// computed会读取缓存数据</span><br><span class="line">const num2 = computed(() =&gt; &#123;</span><br><span class="line">console.log(&#x27;computed执行&#x27;)</span><br><span class="line">return num1.value  + 10</span><br><span class="line">&#125;)</span><br><span class="line">//watch：监控某个数据，被监控的数据更改，则watch执行</span><br><span class="line">const num3 = ref(&#x27;未成年&#x27;)</span><br><span class="line">watch(num1,(newValue, oldValue)=&gt;&#123;</span><br><span class="line">console.log(&#x27;watch执行&#x27;)</span><br><span class="line">if(newValue &gt; 18)&#123;</span><br><span class="line"> num3.value = &#x27;已成年&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line"> num1.value += 20</span><br><span class="line">&#125;, 2000)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line"> &lt;p&gt;小红年龄&#123;num1&#125;&lt;/p&gt;</span><br><span class="line"> &lt;p&gt;小红哥哥年龄&#123;num2&#125;&lt;/p&gt;</span><br><span class="line"> &lt;p&gt;小红&#123;num3&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="4、router、routes和route"><a href="#4、router、routes和route" class="headerlink" title="4、router、routes和route"></a>4、router、routes和route</h2><p>router：路由对象； routes：路由配置； route：当前路由信息</p><p>1、router：路由器（new的路由器对象），包含一些操作路由的功能函数，来实现编程式导航。一般指的是在任何组件内访问路由。如：路由编程式导航的$router.push()<br>2、routes：指创建vue-router路由实例的配置项。用来配置多个route路由对象<br>3、route：指路由对象表示当前激活的路由的状态信息。一般用来获取页面信息.如：this.$route指的是当前路由对象，path&#x2F;meta&#x2F;query&#x2F;params</p><h2 id="5、v-if和v-show"><a href="#5、v-if和v-show" class="headerlink" title="5、v-if和v-show"></a>5、v-if和v-show</h2><p>v-if：控制元素是否渲染（动态的向DOM树中添加或删除DOM元素）</p><p>v-show：控制的是样式的 display：none</p><p>共同点：</p><p> 在 vue 中 v-show 与 v-if 的作用效果是相同的(不含v-else)，都能控制元素在页面是否显示 。</p><ul><li>当表达式都为 false 时，都不会占据页面位置</li><li>当表达式结果为 true 时，都会占据页面的位置</li></ul><p>不同点：</p><p>v-show 是通过控制display属性来进行dom的显示与隐藏</p><p>v-if 是真正意义上的条件渲染，为true是渲染（dom存在），为false时不存在（dom不存在）</p><p>v-if 与 v-show 都能控制dom元素在页面的显示</p><p>v-if 相比 v-show 开销更大的（直接操作dom节点增加与删除）</p><p>如果需要非常频繁地切换，则使用 v-show 较好</p><p>如果在运行时条件很少改变，则使用 v-if 较好</p><h2 id="6、vue组件传参"><a href="#6、vue组件传参" class="headerlink" title="6、vue组件传参"></a>6、vue组件传参</h2><ul><li>父传子：props</li></ul><p>&lt;父组件通过标签属性进行数据传递&gt;</p><p>子组件通过defineProps获取父组件传过来的数据</p><p>子组件不允许更改父组件的数据</p><ul><li>子传父：emit</li></ul><p>emits触发组件的自定义事件</p><ul><li>兄弟组件传参：事件总线bus Vue3使用mitt插件</li></ul><p>事件总线：相当于全局的时间管理</p><p>使用：</p><p>​mitt.emit(‘方法名’,参数)：触发某个方法</p><p>​mitt.on(‘对应方法名’, callback)：监听某个方法</p><p>​mitt.off(‘移除对应方法’)：移除某个方法，一般放再onUnmounted声明周期里面</p><h2 id="7、Vue项目中key的作用"><a href="#7、Vue项目中key的作用" class="headerlink" title="7、Vue项目中key的作用"></a>7、Vue项目中key的作用</h2><ul><li><p>key的作用是为了在diff算法执行时更快的找到对应的节点，<code>提高diff速度，更高效的更新虚拟DOM</code>;</p><p>Vue是采用diff算法来对比新旧虚拟节点，从而更新节点。在vue的diff函数中，会根据新节点的key去对比旧节点数组中的key，从而找到相应旧节点。如果没找到就认为是一个新增节点。而如果没有key，那么就会采用遍历查找的方式去找到对应的旧节点。一种一个map映射，另一种是遍历查找。相比而言。map映射的速度更快。</p></li><li><p>为了在数据变化时强制更新组件，以避免<code>“就地复用”</code>带来的副作用。</p><p>当 Vue.js 用 <code>v-for</code> 更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。重复的key会造成渲染错误。</p></li></ul><h2 id="8、Vuex"><a href="#8、Vuex" class="headerlink" title="8、Vuex"></a>8、Vuex</h2><p>Vuex 是一个专为 Vue 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。</p><ol><li>Vuex 的状态存储是响应式的；当 Vue 组件从 store 中读取状态的时候，</li></ol><p>若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新 2. 改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation， 这样使得我们可以方便地跟踪每一个状态的变化 Vuex主要包括以下几个核心模块：</p><ol><li>State：定义了应用的状态数据</li><li>Getter：在 store 中定义“getter”（可以认为是 store 的计算属性），</li></ol><p>就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来， 且只有当它的依赖值发生了改变才会被重新计算 3. Mutation：是唯一更改 store 中状态的方法，且必须是同步函数 4. Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作 5. Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中</p><h2 id="9、Diff算法"><a href="#9、Diff算法" class="headerlink" title="9、Diff算法"></a>9、Diff算法</h2><p>​每一个真实的dom都有对应的一个虚拟dom，即一个JS对象。当一个dom发生变化时候，其虚拟dom也会发生变化，这时就需要判断前后两个虚拟dom的变化，找出两者差异，这时候就需要diff算法找出差异，然后最小化更新视图。本质就是比较两个JS对象的差异。</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303251347564.png" alt="image-20230325134724365"></p><p>updateChildren</p><p> 1、同级比对 2、首尾比对</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303251347247.png" alt="image-20230325134745100"></p><p>真实DOM的位置以比较后newVnode的位置为基准。当新旧节点中其中一个有end和start相交，结束。</p><p>Diff算法主要就是在虚拟DOM树发生变化后，生成DOM树更新补丁的方式，对比新旧两株虚拟DOM树的变更差异，将更新补丁作用于真实DOM，以最小成本完成视图更新；2、框架会将所有的结点先转化为虚拟节点Vnode，在发生更改后将VNode和原本页面的OldNode进行对比，然后以VNode为基准，在oldNode上进行准确的修改。（修改准则：原本没有新版有，则增加；原本有新版没有，则删除；都有则进行比较，都为文本结点则替换值；都为静态资源不处理；都为正常结点则替换）</p><h2 id="10、常用指令"><a href="#10、常用指令" class="headerlink" title="10、常用指令"></a>10、常用指令</h2><p>{} 两个大括号 双向绑定值语法</p><p>v-text 编译成文字段落</p><p>v-html 把html代码段编译成元素</p><p>v-bind 简写 : 绑定值成变量</p><p>v-for 循环</p><p>v-if、v-else-if、v-else 条件渲染（不占位）</p><p>v-show 条件渲染（占位）</p><p>v-on 简写 @ 一般用来绑定事件</p><p>v-pre 跳过编译（几乎99%不会用）</p><p>v-once 仅渲染一次（几乎99%不会用）</p><p>v-cloak 插值闪烁问题</p><p>v-model 双向绑定值，利用Object.defineProperty</p><h2 id="11、ref和reactive区别"><a href="#11、ref和reactive区别" class="headerlink" title="11、ref和reactive区别"></a>11、ref和reactive区别</h2><ul><li>从定义数据方面：<br>ref通常用来定义基本类型数据<br>reactive用来定义：对象（或者数组）类型数据<br>ref也可以用来定义对象或者数组类型的数据，内部会通过reactive转为代理对象</li><li>从原理方面：<br>ref通过Object.defineProperty()的get和set实现数据代理。<br>reactive使用Proxy实现数据代理，并且通过Reflect操作源对象内部的数据。</li><li>从使用方面：<br>ref操作数据需要.value，template模板中不需要。<br>reactive都不需要.value</li></ul><h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><h2 id="1、优化-Webpack-的构建速度"><a href="#1、优化-Webpack-的构建速度" class="headerlink" title="1、优化 Webpack 的构建速度"></a>1、优化 Webpack 的构建速度</h2><ul><li>使用高版本的 Webpack （使用webpack4）</li><li>多线程&#x2F;多实例构建：HappyPack(不维护了)、thread-loader</li><li>缩小打包作用域：<ul><li>exclude&#x2F;include (确定 loader 规则范围)</li><li>resolve.modules 指明第三方模块的绝对路径 (减少不必要的查找)</li><li>resolve.extensions 尽可能减少后缀尝试的可能性</li><li>noParse 对完全不需要解析的库进行忽略 (不去解析但仍会打包到 bundle 中，注意被忽略掉的文件里不应该包含 import、require、define 等模块化语句)</li><li>IgnorePlugin (完全排除模块)</li><li>合理使用alias</li></ul></li><li>充分利用缓存提升二次构建速度：<ul><li>babel-loader 开启缓存</li><li>terser-webpack-plugin 开启缓存</li><li>使用 cache-loader 或者 hard-source-webpack-plugin<br> 注意：thread-loader 和 cache-loader 兩個要一起使用的話，請先放 cache-loader 接著是 thread-loader 最後才是 heavy-loader</li></ul></li></ul><ul><li>DLL：使用 DllPlugin 进行分包，使用 DllReferencePlugin(索引链接) 对 manifest.json 引用，让一些基本不会改动的代码先打包成静态资源，避免反复编译浪费时间。</li></ul><h2 id="2、优化-Webpack-的打包体积"><a href="#2、优化-Webpack-的打包体积" class="headerlink" title="2、优化 Webpack 的打包体积"></a>2、优化 Webpack 的打包体积</h2><ul><li>压缩代码</li><li>提取页面公共资源：</li><li>Tree shaking</li><li>Scope hoisting</li><li>图片压缩</li><li>动态Polyfill</li></ul><h2 id="3、webpack构建流程"><a href="#3、webpack构建流程" class="headerlink" title="3、webpack构建流程"></a>3、webpack构建流程</h2><p>​Webpack启动后，从entry开始，去递归解析entry依赖的所有module，再找到每一个module的时候，会根据module.rules里配置的不同loader进行相应的转换，对module进行转换后再解析出当前module依赖的其他的一些模块，这些module在entry里面，它会进行分组，解析成一个个的chunk，最后webpack会将所有chunk转换成文件输出的output，在整个构建流程中，通过plugin注入钩子，最后输出多个模块组合成的文件。</p><h1 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h1><h2 id="1、Babel编译过程"><a href="#1、Babel编译过程" class="headerlink" title="1、Babel编译过程"></a>1、Babel编译过程</h2><p>Babel 是一个 JavaScript 编译器，是一个工具链，主要用于将采用 ECMAScript 2015+ 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。</p><p><code>Babel</code> 本质上就是在操作 <code>AST</code> 来完成代码的转译。AST是抽象语法树（Abstract Syntax Tree, AST）</p><p><code>Babel</code> 的功能很纯粹，它只是一个编译器。大多数编译器的工作过程可以分为三部分：</p><ol><li><strong>解析（Parse）</strong> ：将源代码转换成更加抽象的表示方法（例如抽象语法树）。包括词法分析和语法分析。词法分析主要把字符流源代码（Char Stream）转换成令牌流（ Token Stream），语法分析主要是将令牌流转换成抽象语法树（Abstract Syntax Tree，AST）。</li><li><strong>转换（Transform）</strong> ：通过 Babel 的插件能力，对（抽象语法树）做一些特殊处理，将高版本语法的 AST 转换成支持低版本语法的 AST。让它符合编译器的期望，当然在此过程中也可以对 AST 的 Node 节点进行优化操作，比如添加、更新以及移除节点等。</li><li><strong>生成（Generate）</strong> ：将 AST 转换成字符串形式的低版本代码，同时也能创建 Source Map 映射。</li></ol><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="1、基本指令"><a href="#1、基本指令" class="headerlink" title="1、基本指令"></a>1、基本指令</h2><p>git clone 仓库地址<br>git init<br>git remote add origin 添加仓库地址<br>git remote remove origin 删除仓库地址<br>增删改：git add . &#x2F; commit &#x2F; push</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202303251430018.jpeg" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器搭建/使用</title>
      <link href="/2023/03/20/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/03/20/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h2><p>官网直接购买后，会转跳到该页面</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202302222158245.png" alt="image-20230222215820165"></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>可在右边菜单栏找到<strong>实例</strong>，对服务器进行操作。</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202302222204708.png" alt="image-20230222220431642"></p><p>选择远程连接，页面会提示以下几种连接方式</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202302222215107.png" alt="image-20230222221511058"></p><h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><p>我选用的是Xshell进行连接，</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202302232048128.png" alt="image-20230223204821951"></p><p>连接成功后，输入服务器的用户名以及密码。</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202302232049015.png" alt="image-20230223204932966"></p><blockquote><p>Welcome to Alibaba Cloud Elastic Compute Service !</p></blockquote><p>登录成功。</p><h2 id="设置网络安全组"><a href="#设置网络安全组" class="headerlink" title="设置网络安全组"></a>设置网络安全组</h2><p>阿里云默认对服务器端口进行了限制，可能会导致mysql无法远程连接或者nginx页面无法访问，配置网络安全组即可。</p><p>（1）在控制台，点击：更多–&gt;网络和安全–&gt;安全组配置</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202302232057006.png" alt="image-20230223205739943"></p><p>（2）点击配置规则</p><p>（3）点击右上角快速创建规则（新版找不到，建议回到旧版）</p><p>选则需要访问的端口号，也可以自定义添加，授权对象填写0.0.0.0&#x2F;0</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/202302232106665.png" alt="image-20230223210604601"></p><p>（5）设置之后重启服务器，即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode(Updating...)</title>
      <link href="/2023/01/13/LeetCode-Updating/"/>
      <url>/2023/01/13/LeetCode-Updating/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode（Updating…）"><a href="#LeetCode（Updating…）" class="headerlink" title="LeetCode（Updating…）"></a>LeetCode（Updating…）</h1><h2 id="2、两数相加（考核链式）"><a href="#2、两数相加（考核链式）" class="headerlink" title="2、两数相加（考核链式）"></a>2、两数相加（考核链式）</h2><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>__思路__：由于JS中没有内置链表，这里是自定义好的链式。其工作原理为，定义值val和next指向，而next会指向下一个node的val（对象套对象）。</p><p>1、判断l1和l2是否为其链式最后一位数，如果都是，跳出循环。注意：这里的l1和l2都是对象，所以即便他们都是空的，也不会跳出循环。所以，只有他们都为null，即为链式的结尾时，才会跳出while循环。</p><p>2、将l1和l2的node的val处理，赋给l3的node</p><p>3、l1和l2转跳到下一个node</p><p>4、当跳出循环，表示l1和l2都已经到尾部，这时判断是否有进位，有的话给l3再添加一个进位即可</p><p>5、注意：l3 new完后赋值给a3（不要对原链进行操作），这样l3可以作为链式的头部，如果直接用l3进行所有操作，最后返回l3的时候，只有链式的最后一个位或倒数第二位（有进位的情况）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * function ListNode(val, next) &#123;</span><br><span class="line"> *     this.val = (val===undefined ? 0 : val)</span><br><span class="line"> *     this.next = (next===undefined ? null : next)</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;ListNode&#125; l1</span><br><span class="line"> * @param &#123;ListNode&#125; l2</span><br><span class="line"> * @return &#123;ListNode&#125;</span><br><span class="line"> */</span><br><span class="line"> //这里自定义的链式，next都指向下一个node的val</span><br><span class="line">var addTwoNumbers = function(l1, l2) &#123;</span><br><span class="line">    let a1 = l1</span><br><span class="line">    let a2 = l2</span><br><span class="line">    let carry = 0</span><br><span class="line">    let l3 = new ListNode()</span><br><span class="line">    let a3 = l3</span><br><span class="line">    //如果a1和a2中有一个没有读到null（结尾），循环继续。</span><br><span class="line">    while(a1 || a2)&#123;</span><br><span class="line">        //如果a1先结束，给后面的值都赋为0</span><br><span class="line">        const val1 = a1?a1.val:0;</span><br><span class="line">        //a2同理</span><br><span class="line">        const val2 = a2?a2.val:0;</span><br><span class="line">        const val3 = (val1 + val2 + carry) % 10</span><br><span class="line">        //判断是否有进位</span><br><span class="line">        carry = Math.floor((val1 + val2 + carry) / 10)</span><br><span class="line"></span><br><span class="line">        a3.next = new ListNode(val3)</span><br><span class="line">        //判断a是否为结尾，不是的话，读下一个node</span><br><span class="line">        if(a1) &#123;a1 = a1.next&#125;</span><br><span class="line">        if(a2) &#123;a2 = a2.next&#125;</span><br><span class="line">        a3 = a3.next</span><br><span class="line">    &#125;</span><br><span class="line">    //判断最后一位是否有进位</span><br><span class="line">    if(carry === 1)&#123;</span><br><span class="line">        a3.next = new ListNode(carry)</span><br><span class="line">    &#125;</span><br><span class="line">    return l3.next</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>补充上面第五点：</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301141549778.png" alt="img"></p><ul><li>情况一</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let a = new ListNode();</span><br><span class="line">// let b = a</span><br><span class="line">a.next = new ListNode(1)</span><br><span class="line">a = a.next</span><br><span class="line">a.next = new ListNode(2)</span><br><span class="line">a = a.next</span><br><span class="line">console.log(a)</span><br></pre></td></tr></table></figure><p>结果：<img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301111636119.png" alt="image-20230111163621543"></p><p>很明显，其实上面的代码只是不断更新a这个对象中的next属性，将最后new出来的ListNode(2)又赋给了a，最后a还是只有一个node</p><ul><li>情况二</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let a = new ListNode();</span><br><span class="line">let b = a</span><br><span class="line">//此时，b===a</span><br><span class="line">b.next = new ListNode(1)</span><br><span class="line">b = b.next</span><br><span class="line">//b已经是一个全新的对象（即next指向的下一个node）， b!==a</span><br><span class="line">b.next = new ListNode(2)</span><br><span class="line">b = b.next</span><br><span class="line">console.log(a)</span><br></pre></td></tr></table></figure><p>结果：<img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301111639562.png" alt="image-20230111163956390"></p><p>可以看出，这里没有直接修改链式a的属性，而是给a.next嵌套了一个新的node对象。</p><h2 id="3、无重复字符的最长字串"><a href="#3、无重复字符的最长字串" class="headerlink" title="3、无重复字符的最长字串"></a>3、无重复字符的最长字串</h2><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例子1：</span><br><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br><span class="line">例子2：</span><br><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><p>这道题想的挺久的，一开始是下面的思路（其实是读题没读对），后面才发现想的方向错了。下面的代码其实是解决一个字符串中，首尾元素重复的子字符串的最大或最小长度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;string&#125; s</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">var lengthOfLongestSubstring = function(s) &#123;</span><br><span class="line">    let arr = Array.from(s)</span><br><span class="line">    let len = arr.length</span><br><span class="line">    let maxCount = 0</span><br><span class="line">    for(let i = 0; i &lt; len - 1; i++)&#123;</span><br><span class="line">        let j = i + 1</span><br><span class="line">        let count = 0</span><br><span class="line"></span><br><span class="line">        while(1)&#123;</span><br><span class="line">            count++</span><br><span class="line">            if(arr[i] == arr[j]) &#123;</span><br><span class="line">                break</span><br><span class="line">            &#125;</span><br><span class="line">            if(count &gt; maxCount) &#123;</span><br><span class="line">                maxCount = count</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            j++</span><br><span class="line">            if(j == len) &#123;</span><br><span class="line">                break</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return maxCount</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后来实在想不到了，就看到下面这幅图，思想很清晰，具体实现过程写在代码的注释里了。</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301121417343.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;string&#125; s</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">var lengthOfLongestSubstring = function(s) &#123;</span><br><span class="line">    //先将字符串转数组</span><br><span class="line">    let arr = Array.from(s)</span><br><span class="line">    //将该数组的第一位赋给新数组[]</span><br><span class="line">    let newArr = [arr[0]]</span><br><span class="line">    let len = arr.length</span><br><span class="line">    let newLen = newArr.length</span><br><span class="line">    let maxCount = 0</span><br><span class="line">    //对数组arr进行遍历</span><br><span class="line">    for(let i = 1; i &lt; len; i++)&#123;</span><br><span class="line">        //在arr的基础上对newArr进行遍历</span><br><span class="line">        for(let j = 0; j &lt; newLen; j++)&#123;</span><br><span class="line">            //判断是否新数组中是否已经存在 属于arr下标i对应的元素</span><br><span class="line">            let index = newArr.indexOf(arr[i])</span><br><span class="line">            newArr.push(arr[i])</span><br><span class="line">            //存在的话（newArr中相同的元素最多有两个，且其他元素皆无相同元素），</span><br><span class="line">            //将找到相同元素的第一个元素前面的全部数组删除。</span><br><span class="line">            if(index &gt;= 0)&#123;</span><br><span class="line">                newArr.splice(0 , index + 1)</span><br><span class="line">            &#125;</span><br><span class="line">            //如果修改后的数组长度要大于前面记录的maxCount，赋值</span><br><span class="line">            if(newArr.length &gt; maxCount)&#123;</span><br><span class="line">                maxCount = newArr.length</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return maxCount</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、最长回文串"><a href="#5、最长回文串" class="headerlink" title="5、最长回文串"></a>5、最长回文串</h2><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">输入：s = &quot;babad&quot;</span><br><span class="line">输出：&quot;bab&quot;</span><br><span class="line">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure><p>又是想了很久的题目，思路是左右指针偏移的情况。</p><p><img src="https://pic.leetcode-cn.com/533a8538f42e6a6495b87d0c054224fdaa2e6da1cd9158f3e9042894137961fc-%E6%88%AA%E5%B1%8F2019-12-06%E4%B8%8A%E5%8D%887.54.28.png" alt="截屏2019-12-06上午7.54.28.png"></p><p>本以为是很简单的情况，但越写发现情况越多，虽然最后代码写出来了，但实在是太复杂了。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;string&#125; s</span><br><span class="line"> * @return &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">var longestPalindrome = function(s) &#123;</span><br><span class="line">    let arr = Array.from(s)</span><br><span class="line">    let len = arr.length</span><br><span class="line">    let OutArr = [arr[0]]</span><br><span class="line">    //数组长度小于三的情况</span><br><span class="line">    if(arr.length &lt;= 2)&#123;</span><br><span class="line">        if(arr[0]==arr[1])&#123;</span><br><span class="line">            return s</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return arr[0]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //数组长度大于等于三的情况</span><br><span class="line">   for(let i = 1; i &lt; (len - 1); i++)&#123;</span><br><span class="line">        let j = (i - 1)//左指针</span><br><span class="line">        let k = (i + 1)//右指针</span><br><span class="line">        //如果一开始左指针和i相同，就让左指针一直左移，直到不同；</span><br><span class="line">        while((arr[j] == arr[i]))&#123;</span><br><span class="line">            //跳出循环两个条件</span><br><span class="line">            //1、左指针到达尽头</span><br><span class="line">            //2、左指针的数不等于右指针的数（这种情况是为了解决左右指针一开始就不同的字符串 如 1223 12224）</span><br><span class="line">            if(arr[k] != arr[j] &amp;&amp; (k-j) &gt;= OutArr.length)&#123;</span><br><span class="line">                OutArr = arr.slice(j,k)</span><br><span class="line">                break</span><br><span class="line">            &#125;</span><br><span class="line">            if(j == 0) break</span><br><span class="line">            if(j &gt; 0)&#123;</span><br><span class="line">                j--//左指针左移</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        while((arr[k] == arr[i]))&#123;</span><br><span class="line">            //这边和上面是同理的</span><br><span class="line">            if( arr[k] != arr[j])&#123;</span><br><span class="line">                //(k-j) &gt;= OutArr.length是为了保证最后一轮进入不了判断3，而影响OutArr结果</span><br><span class="line">                if(arr[j]==arr[i] &amp;&amp; (k-j) &gt;= OutArr.length)&#123;</span><br><span class="line">                    OutArr = arr.slice(j , k+1)</span><br><span class="line">                &#125;</span><br><span class="line">                if(arr[j] != arr[i] &amp;&amp; (k-j) &gt;= OutArr.length)&#123;</span><br><span class="line">                    OutArr = arr.slice(j+1 , k+1)</span><br><span class="line">                &#125;</span><br><span class="line">                k++</span><br><span class="line">                break</span><br><span class="line">            &#125;</span><br><span class="line">            if(k == (len - 1)) break</span><br><span class="line">            if(k &lt; len)&#123;</span><br><span class="line">                k++//右指针右移</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //判断3：进入开始判断左右指针(此时左右指针之间的数字为一个或多个arr[i]，即(左指针)11111(右指针))</span><br><span class="line">        while(arr[k] == arr[j])&#123;</span><br><span class="line">            //左右指针相同，就继续扩大范围</span><br><span class="line">            if(arr[k] == arr[j])&#123;</span><br><span class="line">               let tempArr = arr.slice(j, (k + 1))</span><br><span class="line">               //判断这次循环的回文字符串是否是最大的</span><br><span class="line">               if(tempArr.length &gt;= OutArr.length) &#123;</span><br><span class="line">                    OutArr = tempArr</span><br><span class="line">                &#125;</span><br><span class="line">                //如果左右指针在不断移动的过程中仍相同，当左指针或右指针到尽头，跳出来</span><br><span class="line">                if(j == 0 || k == (len + 1))&#123;</span><br><span class="line">                    break</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            j--</span><br><span class="line">            k++</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   return OutArr.join(&#x27;&#x27;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>别人写的，思路一样，这个其实就是将情况分成了两种，奇数长度（aba）和偶数长度（abba）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;string&#125; s</span><br><span class="line"> * @return &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">var longestPalindrome = function(s) &#123;</span><br><span class="line">        if (s.length&lt;2)&#123;</span><br><span class="line">            return s</span><br><span class="line">        &#125;</span><br><span class="line">        let res = &#x27;&#x27;</span><br><span class="line">        for (let i = 0; i &lt; s.length; i++) &#123;</span><br><span class="line">            // 回文子串长度是奇数</span><br><span class="line">            helper(i, i)</span><br><span class="line">            // 回文子串长度是偶数</span><br><span class="line">            helper(i, i + 1) </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function helper(m, n) &#123;</span><br><span class="line">            while (m &gt;= 0 &amp;&amp; n &lt; s.length &amp;&amp; s[m] == s[n]) &#123;</span><br><span class="line">                m--</span><br><span class="line">                n++</span><br><span class="line">            &#125;</span><br><span class="line">            // 注意此处m,n的值循环完后  是恰好不满足循环条件的时刻</span><br><span class="line">            // 此时m到n的距离为n-m+1，但是mn两个边界不能取 所以应该取m+1到n-1的区间  长度是n-m-1</span><br><span class="line">            if (n - m - 1 &gt; res.length) &#123;</span><br><span class="line">                // slice也要取[m+1,n-1]这个区间 </span><br><span class="line">                res = s.slice(m + 1, n)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">作者：Salvatore</span><br><span class="line">链接：https://leetcode.cn/problems/longest-palindromic-substring/solutions/697935/chao-jian-dan-de-zhong-xin-kuo-san-fa-yi-qini/</span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h2 id="20、有效的括号"><a href="#20、有效的括号" class="headerlink" title="20、有效的括号"></a>20、有效的括号</h2><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ol><p>这道题其实没啥思路，感觉自己有点陷入一直用for循环的死胡同了，啥都想要用for解决&#x3D; &#x3D;</p><p>看到栈方法后，思路一下就清晰了，其实用栈解决这道题，会很简单。</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301141350492.png" alt="image-20230114135003411"></p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301141350601.png" alt="image-20230114135022537"></p><p>流程图如下：</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301141409629.png" alt="image-20230114140914559"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;string&#125; s</span><br><span class="line"> * @return &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">var isValid = function(s) &#123;</span><br><span class="line">    let stack = []</span><br><span class="line">    let map = new Map([</span><br><span class="line">        [&#x27;&#123;&#x27;,&#x27;&#125;&#x27;],</span><br><span class="line">        [&#x27;(&#x27;,&#x27;)&#x27;],</span><br><span class="line">        [&#x27;[&#x27;,&#x27;]&#x27;]</span><br><span class="line">    ])</span><br><span class="line">    let len = s.length</span><br><span class="line">    if(len % 2 != 0)&#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">    for(let i = 0; i &lt; len; i++)&#123;</span><br><span class="line">        //判断s[i]是否为&#123; [ (,是的话，就给栈加入</span><br><span class="line">        if(map.has(s[i]))&#123;</span><br><span class="line">            stack.push(s[i])</span><br><span class="line"></span><br><span class="line">        &#125; else if(map.get(stack[stack.length - 1]) == s[i])&#123;</span><br><span class="line">            //判断s[i]是否为&#125; ] )且对应栈里的最后一位</span><br><span class="line">            stack.pop()</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //判断</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    return stack.length == 0? true : false</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="35、搜索插入位置"><a href="#35、搜索插入位置" class="headerlink" title="35、搜索插入位置"></a>35、搜索插入位置</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 <code>O(log n)</code> 的算法。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">实例一：</span><br><span class="line">输入: nums = [1,3,5,6], target = 5</span><br><span class="line">输出: 2</span><br><span class="line">实例二：</span><br><span class="line">输入: nums = [1,3,5,6], target = 2</span><br><span class="line">输出: 1</span><br><span class="line">实例三：</span><br><span class="line">输入: nums = [1,3,5,6], target = 7</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure></blockquote><p>这道题其实很好想到使用二分法做，但写的时候还是遇到很多问题，其实就是边界定义搞不清楚。</p><p>用了很多if去限制边界，这样其实是很麻烦的。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;number[]&#125; nums</span><br><span class="line"> * @param &#123;number&#125; target</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">var searchInsert = function(nums, target) &#123;</span><br><span class="line">    let min = 0</span><br><span class="line">    let max = nums.length - 1</span><br><span class="line">    let index</span><br><span class="line">    let out = nums.length</span><br><span class="line">    while(min &lt;= max) &#123;</span><br><span class="line">        //取中间索引，使用以下方法而不是Math.floor((max + min) /2)，是防止溢出</span><br><span class="line">        index = min + Math.floor((max - min) /2)</span><br><span class="line">        //如果目标值比中间索引对应的值大，让最小值向中间索引右边移动一位，</span><br><span class="line">        //因为跳出循环条件是最大值小于最小值</span><br><span class="line">        //所以当目标值&gt;中间索引对应的值时，target对应的索引必然不是此时index，且必然会进入下一次循环</span><br><span class="line">        //而当目标值&lt;或=中间索引对应的值时,target对应的索引可能是此时index，所以需要用out记录此index</span><br><span class="line">        if(target &gt; nums[index])&#123;</span><br><span class="line">            min = index + 1</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            out = index</span><br><span class="line">            max = index - 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return out</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><h2 id="69、x的平方根"><a href="#69、x的平方根" class="headerlink" title="69、x的平方根"></a>69、x的平方根</h2><p>给你一个非负整数 <code>x</code> ，计算并返回 <code>x</code> 的 <strong>算术平方根</strong> 。</p><p>由于返回类型是整数，结果只保留 <strong>整数部分</strong> ，小数部分将被 <strong>舍去 。</strong></p><p><strong>注意：</strong>不允许使用任何内置指数函数和算符，例如 <code>pow(x, 0.5)</code> 或者 <code>x ** 0.5</code> 。</p><ul><li>牛顿迭代法</li></ul><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301311540205.png" alt="image-20230131154010954"></p><p>由于是求平方根</p><p>即是<code>y = x^2 - C</code>，选择x0&#x3D;C为初始值</p><p>其中C就是y&#x3D;0时候，开方对应的要求得的值即：C&#x3D;x^2 &#x3D;&gt;  x &#x3D; C^1&#x2F;2 （x为最终求得的平方根，C为要计算的平方根），其中切点为（x0，x0^2 - C）</p><p>可以得到切线函数为 <code>y - (x0^2 + C) = 2x0(x - x0)  </code></p><p>使 y&#x3D;0 可以得到新的与x轴相交的切线的点 x1</p><p><code>x = 1/2(x0 + C/x0)</code> </p><p>将x赋给x0，这样子，x就会不断迭代，向着真正的根x逼近。</p><p>由于JS中数字是有精度的，当x0无限接近x的时候，x^2也无限接近于C，当精度到达一定数量级，x^2 &#x3D;&#x3D; C</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;number&#125; x</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">var mySqrt = function(x) &#123;</span><br><span class="line">    let c = x</span><br><span class="line">    let x0 = x</span><br><span class="line">    while(x0*x0 &gt; x)&#123;</span><br><span class="line">        x0 = 0.5*(x0 + c/x0) | 0</span><br><span class="line">    &#125;</span><br><span class="line">    return Math.floor(x0)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><h2 id="70、爬楼梯"><a href="#70、爬楼梯" class="headerlink" title="70、爬楼梯"></a>70、爬楼梯</h2><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</p><p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><ul><li>斐波那契数列</li></ul><p>​其实这道题，可以倒着想。当在第n层的时候有f(n)种方法到达第n层，那么要想达到第n层，就只有从第n-1层爬一阶或者第n-2层爬两阶两种方法。</p><p>​那么第n-1层&#x3D;&gt;f(n-1)种方法到第n-1层；同理第n-2层&#x3D;&gt;f(n-2)种方法到第n-2层；</p><p>​这也就可以推算出，f(n) &#x3D; f(n-1) + f(n+2) 然后可以递归回到第1、2层</p><p>​到达第一层只有一种方法:f(1)&#x3D;1，到达第二层有两种方法f(2)&#x3D;2，这样倒退就可以得到f(n)了。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;number&#125; n</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">var climbStairs = function(n) &#123;</span><br><span class="line">    let arr = new Array(n).fill(0)</span><br><span class="line">    arr[0] = 1</span><br><span class="line">    arr[1] = 1</span><br><span class="line">    for(let i = 2 ; i &lt;= n ; i++)&#123;</span><br><span class="line">        arr[i] = arr[i-1] + arr[i-2]</span><br><span class="line">    &#125;</span><br><span class="line">    return arr[n]</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><h2 id="101、对称二叉树"><a href="#101、对称二叉树" class="headerlink" title="101、对称二叉树"></a>101、对称二叉树</h2><p>给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202302011639641.png" alt="image-20230201163945557"></p><ul><li>递归</li></ul><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202302011640326.png" alt="image-20230201164030250"></p><p>思路其实就上面这图。每个节点的左子树（右子树）和另一个节点的右子树（左子树）相等。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val, left, right) &#123;</span><br><span class="line"> *     this.val = (val===undefined ? 0 : val)</span><br><span class="line"> *     this.left = (left===undefined ? null : left)</span><br><span class="line"> *     this.right = (right===undefined ? null : right)</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125; root</span><br><span class="line"> * @return &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">var isSymmetric = function(root) &#123;</span><br><span class="line">//定义左右子树比较方法</span><br><span class="line">    let Compare = (left , right) =&gt; &#123;</span><br><span class="line">    //如果子树比较到了尽头，返回true</span><br><span class="line">        if(left == null &amp;&amp; right == null) return true</span><br><span class="line">        //左右子树都存在，比较</span><br><span class="line">        if(left &amp;&amp; right)&#123;</span><br><span class="line">        //如果该节点相同，就继续往下比较其子树</span><br><span class="line">            if(left.val == right.val)&#123;</span><br><span class="line">            //先左边子树左边和右边子树右边进行比较，比较完了没问题后，左边子树右边和右边子树左边</span><br><span class="line">            //进行比较。PS:只有Compare返回true才有继续比较的必要，只要出现一个false，前面递归</span><br><span class="line">            //调用的所有函数都会直接变成false</span><br><span class="line">                return Compare(left.left, right.right) &amp;&amp; Compare(left.right, right.left)</span><br><span class="line">            &#125; else  &#123;</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //只有一个子树存在的情况，必然不对称</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">    //啥也没有的情况，也是对称</span><br><span class="line">    if(root == null)&#123;</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">    //开始递归</span><br><span class="line">    return Compare(root.left , root.right)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><h2 id="108、将有序数组转换为二叉搜索树"><a href="#108、将有序数组转换为二叉搜索树" class="headerlink" title="108、将有序数组转换为二叉搜索树"></a>108、将有序数组转换为二叉搜索树</h2><p>给你一个整数数组 <code>nums</code> ，其中元素已经按 <strong>升序</strong> 排列，请你将其转换为一棵 <strong>高度平衡</strong> 二叉搜索树。</p><p><strong>高度平衡</strong> 二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。</p><p> <img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202302021500688.png" alt="image-20230202150045274"></p><ul><li>迭代法</li></ul><p>定义二叉树比较方法、插入方法；</p><p>每次调用插入方法都去调用二叉树比较方法，然后在正确位置插入。</p><ul><li>递归法</li></ul><p>由于给定的数组已经是升序排列，所以可以采用二分法（取中间索引）的方式，去分成一个一个的子树。再通过递归，将建立好的子树拼凑起来，最后就是一个平衡的二叉树。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val, left, right) &#123;</span><br><span class="line"> *     this.val = (val===undefined ? 0 : val)</span><br><span class="line"> *     this.left = (left===undefined ? null : left)</span><br><span class="line"> *     this.right = (right===undefined ? null : right)</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;number[]&#125; nums</span><br><span class="line"> * @return &#123;TreeNode&#125;</span><br><span class="line"> */</span><br><span class="line">const Bulid = (nums, start, end) =&gt; &#123;</span><br><span class="line">    if(start &gt; end) &#123;</span><br><span class="line">        return null</span><br><span class="line">    &#125;</span><br><span class="line">    //取中间索引对应的值</span><br><span class="line">    const middle = Math.floor((start + end)/2)</span><br><span class="line">    const root = new TreeNode(nums[middle])</span><br><span class="line">//构建左右子树（递归）</span><br><span class="line">    root.left = Bulid(nums , start , middle - 1)</span><br><span class="line">    root.right = Bulid(nums, middle + 1, end)</span><br><span class="line">    return root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var sortedArrayToBST = function(nums) &#123;</span><br><span class="line">//递归入口</span><br><span class="line">    return Bulid(nums, 0, nums.length - 1)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><h2 id="110、平衡二叉树"><a href="#110、平衡二叉树" class="headerlink" title="110、平衡二叉树"></a>110、平衡二叉树</h2><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：</p><blockquote><p>一个二叉树<em>每个节点</em> 的左右两个子树的高度差的绝对值不超过 1 。</p></blockquote><ul><li>思路</li></ul><p>先序遍历每一个节点，对于每个节点，如果该节点左右子树的高度差不超过1，继续先序遍历。</p><p>递归短路条件优先级： 1、如果左右高度差不超1 &#x3D;&gt; 2、左遍历 &#x3D;&gt; 3、右遍历</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val, left, right) &#123;</span><br><span class="line"> *     this.val = (val===undefined ? 0 : val)</span><br><span class="line"> *     this.left = (left===undefined ? null : left)</span><br><span class="line"> *     this.right = (right===undefined ? null : right)</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125; root</span><br><span class="line"> * @return &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">const Depth = (root) =&gt; &#123;</span><br><span class="line">    if(root === null) return 0</span><br><span class="line">    return Math.max(Depth(root.left) ,Depth(root.right)) + 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var isBalanced = function(root) &#123;</span><br><span class="line">    if(root === null) return true</span><br><span class="line">    let left = Depth(root.left)</span><br><span class="line">    let right = Depth(root.right)</span><br><span class="line"></span><br><span class="line">    return Math.abs(left - right) &lt;= 1 &amp;&amp; isBalanced(root.left) &amp;&amp;  isBalanced(root.right)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><h2 id="121、买卖股票的最佳时机"><a href="#121、买卖股票的最佳时机" class="headerlink" title="121、买卖股票的最佳时机"></a>121、买卖股票的最佳时机</h2><p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p><p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> 。</p><ul><li>暴力解法</li></ul><p>直接两个for结束战斗，但很可能超时。</p><ul><li>贪心算法</li></ul><p>只需要遍历价格数组一遍，记录历史最低点，然后在每一天考虑这么一个问题：如果我是在历史最低点买进的，那么我今天卖出能赚多少钱？</p><p>这种想法其实就是取最左最小值，取最右最大值，那么得到的差值就是最大利润。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;number[]&#125; prices</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">var maxProfit = function(prices) &#123;</span><br><span class="line">    const n = prices.length</span><br><span class="line">    let minPrice = prices[0]</span><br><span class="line">    let sellPrice = 0</span><br><span class="line">    for(let i = 0; i &lt; n; i++)&#123;</span><br><span class="line">        if(prices[i] &lt; minPrice)&#123;</span><br><span class="line">            minPrice = prices[i]</span><br><span class="line">        &#125;</span><br><span class="line">        sellPrice = Math.max(prices[i] - minPrice ,sellPrice)</span><br><span class="line">    &#125;</span><br><span class="line">    return sellPrice</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><h2 id="141、环形链表"><a href="#141、环形链表" class="headerlink" title="141、环形链表"></a>141、环形链表</h2><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong> 。仅仅是为了标识链表的实际情况。</p><p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p><ul><li>暴力解法</li></ul><p>两个For，不写</p><ul><li>快慢指针法</li></ul><p>一个快指针按照两个next的速度遍历链表，一个慢指针一个一个遍历链表。</p><p>如果存在循环，快指针一定会在某时刻等于慢指针；其实就是绕操场跑圈的思路，跑得快的人，一定会在某个时候碰见跑的慢的人。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * function ListNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.next = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @param &#123;ListNode&#125; head</span><br><span class="line"> * @return &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">var hasCycle = function(head) &#123;</span><br><span class="line">    let fast = head, slow = head</span><br><span class="line">    if(head == null || head.next == null) return false</span><br><span class="line">    while(fast)&#123;</span><br><span class="line">        if(fast.next == null) return false</span><br><span class="line">        // if(fast.next.next == null) return false</span><br><span class="line">        fast = fast.next.next</span><br><span class="line">        slow = slow.next</span><br><span class="line">        if(fast == slow) return true</span><br><span class="line">        if(slow.next == null) return false</span><br><span class="line">    &#125;</span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="160、相交链表"><a href="#160、相交链表" class="headerlink" title="160、相交链表"></a>160、相交链表</h2><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 <code>null</code> 。</p><p>图示两个链表在节点 <code>c1</code> 开始相交：</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202302061432001.png" alt="image-20230206143205932"></p><ul><li>双指针法</li></ul><p>pA走过的路径为A链+B链</p><p>pB走过的路径为B链+A链</p><p>pA和pB走过的长度都相同，都是A链和B链的长度之和，相当于将两条链从尾端对齐，如果相交，则会提前在相交点相遇，如果没有相交点，则会在最后相遇。</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202302061433171.png" alt="image-20230206143322114"></p><blockquote><p>pA:1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;null-&gt;9-&gt;5-&gt;6-&gt;null</p><p>pB:9-&gt;5-&gt;6-&gt;null-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;null</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * function ListNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.next = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @param &#123;ListNode&#125; headA</span><br><span class="line"> * @param &#123;ListNode&#125; headB</span><br><span class="line"> * @return &#123;ListNode&#125;</span><br><span class="line"> */</span><br><span class="line">var getIntersectionNode = function(headA, headB) &#123;</span><br><span class="line">    if(headA == null || headB == null) return null</span><br><span class="line">    let pA = headA , pB = headB</span><br><span class="line">    while(pA !== pB)&#123;</span><br><span class="line">        if(pA !== null)&#123;</span><br><span class="line">            pA = pA.next</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            pA = headB </span><br><span class="line">        &#125;</span><br><span class="line">        if(pB !== null)&#123;</span><br><span class="line">            pB = pB.next</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            pB = headA</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    return pA</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><h2 id="205、同构字符串"><a href="#205、同构字符串" class="headerlink" title="205、同构字符串"></a>205、同构字符串</h2><p>给定两个字符串 <code>s</code> 和 <code>t</code> ，判断它们是否是同构的。</p><p>如果 <code>s</code> 中的字符可以按某种映射关系替换得到 <code>t</code> ，那么这两个字符串是同构的。</p><p>每个出现的字符都应当映射到另一个字符，同时不改变字符的顺序。不同字符不能映射到同一个字符上，相同字符只能映射到同一个字符上，字符可以映射到自己本身。</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202302071345949.png" alt="image-20230207134543873"></p><ul><li>索引法</li></ul><p>同构字符串，两个字符串的每字符 首次出现、最后出现、指定位出现 索引始终相同。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;string&#125; s</span><br><span class="line"> * @param &#123;string&#125; t</span><br><span class="line"> * @return &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">var isIsomorphic = function(s, t) &#123;</span><br><span class="line">    if(s === t &amp;&amp; s === &#x27;&#x27;) return true</span><br><span class="line">    for(let i = 0; i &lt; s.length; i++)&#123;</span><br><span class="line">        if(s.indexOf(s[i], i+1) !== t.indexOf(t[i], i+1)) return false</span><br><span class="line">    &#125;</span><br><span class="line">    return true</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><h2 id="263、丑数"><a href="#263、丑数" class="headerlink" title="263、丑数"></a>263、丑数</h2><p><strong>丑数</strong> 就是只包含质因数 <code>2</code>、<code>3</code> 和 <code>5</code> 的正整数。</p><p>给你一个整数 <code>n</code> ，请你判断 <code>n</code> 是否为 <strong>丑数</strong> 。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>质因数其实是 <code>n = 2^a + 3^b + 5^c （a，b，c为0到正无穷的整数）</code></p><p>只要数字a取余数字b为0，b就是a的因子</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;number&#125; n</span><br><span class="line"> * @return &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">var isUgly = function(n) &#123;</span><br><span class="line">    if(n &lt;= 0) return false</span><br><span class="line">    while(n % 2 == 0) n /= 2</span><br><span class="line">    while(n % 3 == 0) n /= 3</span><br><span class="line">    while(n % 5 == 0) n /= 5</span><br><span class="line">    if(n == 1) return true</span><br><span class="line">    return false </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><p>​</p><h2 id="350、两个数组的交集-II"><a href="#350、两个数组的交集-II" class="headerlink" title="350、两个数组的交集 II"></a>350、两个数组的交集 II</h2><p>给你两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取<strong>较小值</strong>）。可以不考虑输出结果的顺序。</p><ul><li>暴力解法</li></ul><p>先找到交集的数组，再用这个数组和nums1和nums2比较，找到较小值。（麻烦哦！）</p><ul><li>双指针</li></ul><p>1、将两个数组小到大顺序排列</p><p>2、两个指针分别对两个数组从0开始遍历</p><p>3、如果指针对应元素相同，在返回数组中压入该元素。</p><p>4、如果对应元素不相同，较小元素对应的指针右移一位，再次比较。</p><p>5、重复第三和第四步，直到某一数组指针到达最右，结束循环。</p><p>6、最后返回的数组就是答案。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;number[]&#125; nums1</span><br><span class="line"> * @param &#123;number[]&#125; nums2</span><br><span class="line"> * @return &#123;number[]&#125;</span><br><span class="line"> */</span><br><span class="line">var intersect = function(nums1, nums2) &#123;</span><br><span class="line">    let ans = []</span><br><span class="line">    let pB = 0</span><br><span class="line">    let pS = 0</span><br><span class="line">    let numB = nums1.sort((a, b) =&gt; a - b)</span><br><span class="line">    let numS = nums2.sort((a, b) =&gt; a - b)</span><br><span class="line">    while(pS &lt; numS.length &amp;&amp; pB &lt; numB.length)&#123;</span><br><span class="line">        if(numB[pB]  == numS[pS])&#123;</span><br><span class="line">            ans.push(numS[pS])</span><br><span class="line">            pB++</span><br><span class="line">            pS++</span><br><span class="line">        &#125; else&#123;</span><br><span class="line">            numB[pB]  &gt; numS[pS]?pS++:pB++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    return ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><h2 id="389、找不同"><a href="#389、找不同" class="headerlink" title="389、找不同"></a>389、找不同</h2><p>给定两个字符串 <code>s</code> 和 <code>t</code> ，它们只包含小写字母。</p><p>字符串 <code>t</code> 由字符串 <code>s</code> 随机重排，然后在随机位置添加一个字母。</p><p>请找出在 <code>t</code> 中被添加的字母。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;abcd&quot;, t = &quot;abcde&quot;</span><br><span class="line">输出：&quot;e&quot;</span><br><span class="line">解释：&#x27;e&#x27; 是那个被添加的字母。</span><br></pre></td></tr></table></figure><ul><li>暴力解法</li></ul><p>将两个字符串转数组后排序，然后for循环逐一对比每一个元素。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;string&#125; s</span><br><span class="line"> * @param &#123;string&#125; t</span><br><span class="line"> * @return &#123;character&#125;</span><br><span class="line"> */</span><br><span class="line">var findTheDifference = function(s, t) &#123;</span><br><span class="line">    let T = t.split(&#x27;&#x27;).sort()</span><br><span class="line">    let S = s.split(&#x27;&#x27;).sort()</span><br><span class="line">    for(let i = 0; i &lt; T.length; i++)&#123;</span><br><span class="line">        if(S[i]!==T[i]) return T[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure></blockquote><ul><li>位运算</li></ul><p><strong>相同两数按位异或<code>^</code> &#x3D; <code>0</code>。<code>0 ^</code>任何数 &#x3D; 数本身。<code>^</code>满足交换律</strong></p><p>既然，两个字符串相比较，后面那位只多出了一个元素，两个字符串其余元素完全相同。那就可以用异或了。最后异或出来的数字，就是多出来的那一个。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var findTheDifference = function(s, t) &#123;</span><br><span class="line">    let i = -1, r = 0</span><br><span class="line">    while(++i &lt; s.length) r ^= s.charCodeAt(i) ^ t.charCodeAt(i)</span><br><span class="line">    return String.fromCharCode(r ^ t.charCodeAt(i))</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h2 id="405、数字转换为十六进制数"><a href="#405、数字转换为十六进制数" class="headerlink" title="405、数字转换为十六进制数"></a>405、数字转换为十六进制数</h2><p>给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用 <a href="https://baike.baidu.com/item/%E8%A1%A5%E7%A0%81/6854613?fr=aladdin">补码运算</a> 方法。</p><p><strong>注意:</strong></p><ol><li>十六进制中所有字母(<code>a-f</code>)都必须是小写。</li><li>十六进制字符串中不能包含多余的前导零。如果要转化的数为0，那么以单个字符<code>&#39;0&#39;</code>来表示；对于其他情况，十六进制字符串中的第一个字符将不会是0字符。 </li><li>给定的数确保在32位有符号整数范围内。</li></ol><ul><li>位运算法</li></ul><p>1、由于规定为32位整数范围内，在JS中十进制整数可以直接当作二进制进行位运算</p><p>2、取整数num最低位前四位，num &amp; 0xf</p><p>3、将所得前四位转化为十六进制对应的字母，拼接到答案中。</p><p>4、将num右移四位，重复上述操作（由于只进行八轮，负数情况的最高位在33位，所以可以直接使用&gt;&gt;进行位运算）</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;number&#125; num</span><br><span class="line"> * @return &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">var toHex = function(num) &#123;</span><br><span class="line">    if(num === 0) return &#x27;0&#x27;</span><br><span class="line">    let ans = &#x27;&#x27;</span><br><span class="line">    const hex = &#x27;0123456789abcdef&#x27;</span><br><span class="line">    while(num !== 0 &amp;&amp; ans.length &lt; 8)&#123;</span><br><span class="line">        ans = hex[num &amp; 0xf] + ans</span><br><span class="line">        num &gt;&gt;&gt;= 4</span><br><span class="line">    &#125;</span><br><span class="line">    return ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><ul><li>对于位运算的一些补充</li></ul><p>1、&amp;操作</p><ol><li>一个数&amp;自身等于这个数自身</li><li>奇数&amp;1等于1，偶数&amp;1 &#x3D;0。我们可以利用这个来判断奇偶（运算速度比取余快）</li><li>清零。如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。</li></ol><p>2、JS移位运算符（&lt;&lt;、&gt;&gt;和&gt;&gt;&gt;）</p><ol><li>&lt;&lt;运算符</li></ol><p>“&lt;&lt;”运算符执行左移位运算。在移位运算过程中，符号位始终保持不变。如果右侧空出位置，则自动填充为 0；超出 32 位的值，则自动丢弃。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(5 &lt;&lt; 2);  //返回值20</span><br></pre></td></tr></table></figure></blockquote><p>​2.&gt;&gt;运算符</p><p>“&gt;&gt;”运算符执行有符号右移位运算。与左移运算操作相反，它把 32 位数字中的<strong>所有有效位</strong>整体右移，再使用符号位的值填充空位。移动过程中超出的值将被丢弃。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(1000 &gt;&gt; 8);  //返回值3</span><br></pre></td></tr></table></figure></blockquote><p>​3.&gt;&gt;&gt;运算符</p><p>“&gt;&gt;&gt;”运算符执行无符号右移位运算。它把无符号的 32 位整数<strong>所有数位</strong>整体右移。对于无符号数或正数右移运算，无符号右移与有符号右移运算的结果是相同的。</p><blockquote><p>对于正数，两者无区别</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(1000 &gt;&gt; 8);  //返回值3</span><br><span class="line">console.log(1000 &gt;&gt;&gt; 8);  //返回值3</span><br></pre></td></tr></table></figure><blockquote><p>对于负数，无符号右移将使用 0 来填充所有的空位，同时会把负数作为正数来处理，所得结果会非常大。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(-1000 &gt;&gt; 8);  //返回值 -4</span><br><span class="line">console.log(-1000 &gt;&gt;&gt; 8);  //返回值 16777212</span><br></pre></td></tr></table></figure><h2 id="459、-重复的子字符串（KMP算法）"><a href="#459、-重复的子字符串（KMP算法）" class="headerlink" title="459、 重复的子字符串（KMP算法）"></a>459、 重复的子字符串（KMP算法）</h2><p>给定一个非空的字符串 <code>s</code> ，检查是否可以通过由它的一个子串重复多次构成。</p><p><strong>KMP算法</strong></p><p>KMP的主要思想是<strong>当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配了。</strong></p><p>在介绍KMP时，需要引入一些概念</p><p>最长相同前后缀：<strong>前缀是指不包含最后一个字符的所有以第一个字符开头的连续子串</strong>。<strong>后缀是指不包含第一个字符的所有以最后一个字符结尾的连续子串</strong>。最长相同前后缀就是对于一个字串，其前缀与后缀保持相同的最大长度。</p><p>前缀表：要在文本串：aabaabaafa 中查找是否出现过一个模式串：aabaaf。对于该模式串，可生成一个next数组，该数组其实就是对应前缀表，用于对应<strong>记录下标i之前（包括i）的字符串中，有多大长度的相同前缀后缀。</strong></p><p>如：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">next表：该表为字符串的所有字串对应的最长相同前后缀构成的数组。</span><br><span class="line"></span><br><span class="line"> * 最长相等的前后缀：</span><br><span class="line"> * a          0  只有一个，0</span><br><span class="line"> * aa         1  前缀：a。后缀：a</span><br><span class="line"> * aab        0  前缀：a、aa。后缀：b、ab。</span><br><span class="line"> * aaba       1  前缀：a、aa、aab。后缀：a、ba、aba。</span><br><span class="line"> * aabaa      2  前缀：a、aa、aab、aaba。后缀：a、aa、baa、abaa。</span><br><span class="line"> * aabaaf     0  ....</span><br><span class="line"> * </span><br><span class="line"> * next = 【 0,1,0,1,2,0 】，next就是s的前缀表。</span><br><span class="line"> 数组中有两个指针，i和j</span><br><span class="line"> i为后缀末尾（或者说这其实就是对应的不同长度的子字符串），j为前缀末尾（最大相同前后缀-1）</span><br><span class="line"> j的位置为前面相同，后面不同，后面要重新比较的位置。</span><br><span class="line"></span><br><span class="line"> Next数组求法：</span><br><span class="line">（1）初始化</span><br><span class="line"> next[0] = 0；且j = 0</span><br><span class="line">i的迭代用for循环表示</span><br><span class="line">（2）前后缀不相同（要找到上一次 相等前后缀 的下一项继续匹配）</span><br><span class="line">j向前回退（j=next[j-1] next[j-1]：上一个子字符串的最大相同前后缀的下一项），直到s[j]==s[i]或j到达下标为0的位置</span><br><span class="line">（3）前后缀相同</span><br><span class="line">j++（最大相同前后缀）</span><br><span class="line">（4）next更新</span><br><span class="line"> 将i下标对应的next数组值更新 next(i) = j</span><br></pre></td></tr></table></figure></blockquote><p>回到本题：</p><pre><code>    a   s   d   a   s   d   a   s   d    0   0   0   1   2   3   4   5   6       next数组我们可以看出如果s是由子串重复构成的话，会从第二个重复子串开始有最长相等前后缀，并且len - 6 就是第一个字串的长度 a s d，因为第一个子串都是0如果这个长度可以被整除，就说明整个字符串就是这个周期的循环。</code></pre><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;string&#125; s</span><br><span class="line"> * @return &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">var repeatedSubstringPattern = function(s) &#123;</span><br><span class="line">    const n = s.length</span><br><span class="line">    let next = new Array(n).fill(0)</span><br><span class="line">    //获得s的next数组</span><br><span class="line">    for(let i = 1, j = 0; i &lt; n; i++)&#123;</span><br><span class="line">        //前后缀不相同</span><br><span class="line">        while(j &gt; 0 &amp;&amp; s[j] !== s[i])&#123;</span><br><span class="line">            //回退</span><br><span class="line">            // 如果不同，我们要从未匹配好的地方开始继续匹配。</span><br><span class="line">            // 未匹配好的位置在那里呢？</span><br><span class="line">            // 我们知道 next 数组的值就代表每一次子串匹配好的长度，</span><br><span class="line">            // 因为数组是从0开始的，所以该值就指向了未匹配好的位置。</span><br><span class="line">            // 当j === 0时，说明要从头开始重新匹配了</span><br><span class="line">            j = next[j - 1]</span><br><span class="line">        &#125;</span><br><span class="line">        //前后缀相同</span><br><span class="line">        if(s[i] == s[j])&#123;</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">        next[i] = j</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(next[next.length - 1]  !== 0 &amp;&amp; n%(n - next[next.length - 1]) === 0 ) return true</span><br><span class="line">    return false</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><h2 id="746、使用最小花费爬楼梯"><a href="#746、使用最小花费爬楼梯" class="headerlink" title="746、使用最小花费爬楼梯"></a>746、使用最小花费爬楼梯</h2><p>给你一个整数数组 <code>cost</code> ，其中 <code>cost[i]</code> 是从楼梯第 <code>i</code> 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。</p><p>你可以选择从下标为 <code>0</code> 或下标为 <code>1</code> 的台阶开始爬楼梯。</p><p>请你计算并返回达到楼梯顶部的最低花费。</p><ul><li>动态规划</li></ul><p>思想：空间换时间</p><p>动态规划的核心思想就是<strong>拆分子问题，记住过往，减少重复计算。</strong> 并且动态规划一般都是自底向上的，因此到这里，总结了一下做动态规划的思路：</p><ul><li>穷举分析</li><li>确定边界</li><li>找出规律，确定最优子结构</li><li>写出状态转移方程</li></ul><p>1、穷举分析</p><ul><li>当台阶数是1的时候，有一种跳法，f（1） &#x3D;1</li><li>当只有2级台阶时，有两种跳法，第一种是直接跳两级，第二种是先跳一级，然后再跳一级。即f(2) &#x3D; 2;</li><li>当台阶是3级时，想跳到第3级台阶，要么是先跳到第2级，然后再跳1级台阶上去，要么是先跳到第 1级，然后一次迈 2 级台阶上去。所以f(3) &#x3D; f(2) + f(1) &#x3D;3</li><li>当台阶是n级时，要么是先跳到第n-1级，然后再跳1级台阶上去，要么是先跳到第 n-2级，然后一次迈 2 级台阶上去。所以f(n) &#x3D; f(n-2) + f(n-1)</li></ul><p>2、确定边界</p><p>通过穷举分析，我们发现，当台阶数是1的时候或者2的时候，可以明确知道跳法。f（1） &#x3D;1，f(2) &#x3D; 2，当台阶n&gt;&#x3D;3时，已经呈现出规律f(3) &#x3D; f(2) + f(1) &#x3D;3，因此f（1） &#x3D;1，f(2) &#x3D; 2就是跳阶的边界。</p><p>3、找规律，确定最优子结构</p><p>n&gt;&#x3D;3时，已经呈现出规律 f(n) &#x3D; f(n-1) + f(n-2) ，因此，f(n-1)和f(n-2) 称为 f(n) 的最优子结构。</p><p>4、写出状态转移方程</p><p>通过前面3步，穷举分析，确定边界，最优子结构，我们就可以得出状态转移方程</p><ul><li>回到本题</li></ul><p>从最后一个往回倒推：顶部可以从最后一个台阶走一步或者倒数第二个台阶走两步</p><p>从倒数第一个台阶到达顶部的总费用为dp（n-1）+cost[n-1]</p><p>从倒数第二个台阶到达顶部的总费用为dp（n-2）+cost[n-2]</p><p>动态规划数组dp为到达该阶所花费最小费用。</p><p>而从第一或第二阶出发不需要花费，即dp[0]&#x3D;dp[1]&#x3D;0</p><p>由此可以从低到高找到迭代方法：</p><p>初始化为dp[0]&#x3D;dp[1]&#x3D;0；规律为：dp（n-1）+cost[n-1]和dp（n-2）+cost[n-2]中的最小值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;number[]&#125; cost</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">var minCostClimbingStairs = function(cost) &#123;</span><br><span class="line">    let dp = new Array(cost.length+1)</span><br><span class="line">    dp[0] = 0</span><br><span class="line">    dp[1] = 0</span><br><span class="line"></span><br><span class="line">    for(let i = 2; i &lt;= cost.length; i++)&#123;</span><br><span class="line">        dp[i] = Math.min(dp[i-1] + cost[i-1] , dp[i-2] + cost[i-2])</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[cost.length]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一些数据结构与算法</title>
      <link href="/2023/01/10/%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2023/01/10/%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301061452280.png" alt="image-20230106145213189"></p><ul><li>存储方式：</li></ul><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301061501599.png" alt="image-20230106150159499"></p><h3 id="二叉搜索树-BST"><a href="#二叉搜索树-BST" class="headerlink" title="二叉搜索树(BST)"></a>二叉搜索树(BST)</h3><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301061504675.png" alt="image-20230106150422377"></p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301061518174.png" alt="image-20230106151827638"></p><ul><li>封装实现:</li></ul><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//二叉树封装</span><br><span class="line">function BST() &#123;</span><br><span class="line">    //节点保存</span><br><span class="line">    function Node(key) &#123;</span><br><span class="line">        this.key = key </span><br><span class="line">        this.left = null</span><br><span class="line">        this.right = null</span><br><span class="line">    &#125;</span><br><span class="line">    //根属性</span><br><span class="line">    this.root = null;</span><br><span class="line">    </span><br><span class="line">    BST.prototype.insert = function (key) &#123;</span><br><span class="line">        let newNode = new Node(key)</span><br><span class="line">        //判断根是否存在</span><br><span class="line">        if(this.root === null)&#123;</span><br><span class="line">            this.root = newNode</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.NodeCompare(this.root, newNode)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BST.prototype.NodeCompare = function (oldNode, newNode) &#123;</span><br><span class="line">        //左查找</span><br><span class="line">        if(newNode.key &lt; oldNode.key) &#123;</span><br><span class="line">            if(oldNode.left !== null) &#123;</span><br><span class="line">                this.NodeCompare(oldNode.left, newNode)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                oldNode.left = newNode</span><br><span class="line">            &#125;</span><br><span class="line">        //右查找    </span><br><span class="line">        &#125; else if( newNode.key &gt; oldNode.key ) &#123;</span><br><span class="line">            if(oldNode.right !== null) &#123;</span><br><span class="line">                this.NodeCompare(oldNode.right, newNode)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                oldNode.right = newNode</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            alert(&#x27;当前数值已存在&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line">const bst = new BST()</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><ul><li>遍历方法：</li></ul><p>1、先序遍历</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301061608249.png" alt="image-20230106160858807"></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//先序遍历</span><br><span class="line">//handler用于处理遍历显示形式</span><br><span class="line">BST.prototype.preTravelsal = function(handler) &#123;</span><br><span class="line">    this.preTravelsalNode(this.root, handler)</span><br><span class="line">&#125;</span><br><span class="line">//节点遍历</span><br><span class="line">//递归调用栈（前进后出）</span><br><span class="line">BST.prototype.preTravelsalNode = function(Node, handler)&#123;</span><br><span class="line">    if(Node !== null)&#123;</span><br><span class="line">        handler(Node.key)//这个其实可以看做是当前处理的节点</span><br><span class="line">        //处理左子节点</span><br><span class="line">        this.preTravelsalNode(Node.left, handler)</span><br><span class="line">        //如果左子节点没有，处理右子节点</span><br><span class="line">        this.preTravelsalNode(Node.right, handler)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>测试代码：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const bst = new BST()</span><br><span class="line"></span><br><span class="line">bst.insert(3)</span><br><span class="line">bst.insert(1)</span><br><span class="line">bst.insert(4)</span><br><span class="line">bst.insert(0)</span><br><span class="line">bst.insert(2)</span><br><span class="line"></span><br><span class="line">var result = &#x27;&#x27;</span><br><span class="line">bst.preTravelsal(function (key) &#123;</span><br><span class="line">    result += key + &#x27;-&#x27;</span><br><span class="line">&#125;) </span><br><span class="line">console.log(result)</span><br><span class="line">//结果：3-1-0-2-4</span><br></pre></td></tr></table></figure></blockquote><p>2、中序遍历</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301061717225.png" alt="image-20230106171729924"></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//先序遍历对调一下就好</span><br><span class="line">//处理左子节点</span><br><span class="line">this.preTravelsalNode(Node.left, handler)</span><br><span class="line">//处理该节点</span><br><span class="line">handler(Node.key)</span><br><span class="line">//处理右子节点</span><br><span class="line">this.preTravelsalNode(Node.right, handler)</span><br></pre></td></tr></table></figure></blockquote><p>3、后序遍历</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301061720015.png" alt="image-20230106171937295"></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//同理</span><br><span class="line">//先序遍历对调一下就好</span><br><span class="line">//处理左子节点</span><br><span class="line">this.preTravelsalNode(Node.left, handler)</span><br><span class="line">//处理右子节点</span><br><span class="line">this.preTravelsalNode(Node.right, handler)</span><br><span class="line">//处理该节点</span><br><span class="line">handler(Node.key)</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><ul><li>删除节点</li></ul><p>1、查找删除的节点，找到进行下一步，未找到就return</p><p>注意：最好添加几个变量，方便后续删除</p><p>parent（删除节点的父节点） current（要删除的节点） isLeft（删除节点的左侧是否存在）</p><p>2、找到节点分为以下几个情况</p><p>​a、删除叶子点</p><p>​一：isLeft：ture ，让parent.left &#x3D; null</p><p>​二：isLeft：false ，让parent.right &#x3D; null</p><p>​b、删除有一个节点的子节点</p><p>​四种情况</p><p>​parent.left &#x3D; current.left</p><p>​parent.left &#x3D; current.right</p><p>​parent.right &#x3D; current.left</p><p>​parent.right &#x3D; current.right</p><p>​c、删除的节点有两个节点</p><p>​思路：该节点有左右两分支，其实有两种方案，如果选左边，则找到该节点左分支下最大的数字替代该节点。若选的为右边，则选择该节点右分支下最小的数字替代该节点。</p><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ArrayList.prototype.BubbleSort = function () &#123;</span><br><span class="line">    let temp = null</span><br><span class="line">    let arr = this.array</span><br><span class="line">    for(let i = 0 ; i &lt; arr.length ; i++)&#123;</span><br><span class="line">        for(let j = 0; j &lt; arr.length - i; j++)&#123;</span><br><span class="line">            if(arr[j] &gt; arr[j+1])&#123;</span><br><span class="line">                temp = arr[j]</span><br><span class="line">                arr[j] = arr[j+1]</span><br><span class="line">                arr[j+1] = temp</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#x27;冒泡后：&#x27; + arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>冒泡排序效率：</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301091410723.png" alt="image-20230109141033549"></p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>​选择排序的实现思路是从未排序序列中找到最小的元素，放到已排序序列的首位，重复上述步骤，直到所有元素排序完毕。</p><p>1）假设未排序序列的第一个是最小值，记下该元素的位置，从前往后比较<br>2）若某个元素比该元素小，覆盖最小值的位置<br>3）重复第二个步骤，直到找到未排序的末尾<br>4）将未排序元素的第一个元素和最大元素交换位置<br>5）重复前面几个步骤，直到所有元素都已经排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> //选择排序</span><br><span class="line">ArrayList.prototype.SelectSort = function () &#123;</span><br><span class="line">    let temp = null</span><br><span class="line">    let arr = this.array</span><br><span class="line">    let len = this.array.length</span><br><span class="line">    for( let i = 0 ; i &lt; len ; i++)&#123;</span><br><span class="line">        let index = i</span><br><span class="line">        for( let j = i+1; j &lt; len; j++)&#123;</span><br><span class="line">            if(arr[index] &gt; arr[j])&#123;</span><br><span class="line">                index = j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = arr[i]</span><br><span class="line">        arr[i] = arr[index]</span><br><span class="line">        arr[index] = temp</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#x27;选择排序后：&#x27; + arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效率：</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301091440704.png" alt="image-20230109144042607"></p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301091612833.png" alt="image-20230109161222605"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">ArrayList.prototype.InsertSort = function () &#123;</span><br><span class="line">    let Arr = this.array</span><br><span class="line">    let len = this.array.length</span><br><span class="line">    //因为每一次比较，标记index前的数组都被看做为一个整体，所以需要进行lenght-1次比较</span><br><span class="line">    for( let i = 1; i &lt; len ; i++)&#123;</span><br><span class="line">        //j对应需要比较数字的索引</span><br><span class="line">        //让j=i是为了不影响大循环中i</span><br><span class="line">        let j = i</span><br><span class="line">        //将需要比较数字记录为临时变量temp</span><br><span class="line">        let temp = Arr[i]</span><br><span class="line">        //由于插入比较是标记数字对前面的有序数组，进行从大到小的比较</span><br><span class="line">        //所以，当temp小于有序数组中对应数字，循环仍要进行</span><br><span class="line">        while(Arr[j-1] &gt; temp)&#123;</span><br><span class="line">            //由于temp小于该轮有序数组的数字，则要将该轮数字往后移，即index+1，且j--，进行下一轮比较</span><br><span class="line">            Arr[j] = Arr[j-1]</span><br><span class="line">            j--</span><br><span class="line">            //当temp与有序数组中所有数字进行比较仍未满足跳出while循环条件，即temp为有序数组中最小的数，直接在j==0的位置插入</span><br><span class="line">            if(j == 0)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //将temp插入到找到索引对应的位置中</span><br><span class="line">        Arr[j] = temp</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#x27;插入排序：&#x27; + Arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效率：</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301091614746.png" alt="image-20230109161455585"></p><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>​希尔排序是通过比较相距一定间隔的元素来进行，各趟比较所用的距离随着算法的进行而减小，直到只比较相邻元素的最后一趟排序为止。增量为：<strong>gap&#x3D;length&#x2F;2</strong></p><p>原理图示（假设数组长度为8）：</p><p>（1）gap为4</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301091703499.png" alt="img"></p><p>（2）gap为2</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301091704200.png" alt="img"></p><p>（3）gap为1</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301091704566.png" alt="img"></p><p>其实希尔排序是基于插入排序的，只不过是希尔排序按间隔进行了分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//希尔排序</span><br><span class="line">    ArrayList.prototype.ShellSort = function() &#123;</span><br><span class="line">        let len = this.array.length</span><br><span class="line">        let arr = this.array</span><br><span class="line">        let gap = Math.floor(len/2)</span><br><span class="line">        while(gap &gt;= 1) &#123;</span><br><span class="line">            //类似插入算法那一套，但现在间隔变成了gap而不是1</span><br><span class="line">            for( let i = gap; i &lt; len; i++) &#123;</span><br><span class="line">                let j = i</span><br><span class="line">                let temp = arr[j]</span><br><span class="line">                while(arr[j - gap] &gt; temp &amp;&amp; j &gt;= gap) &#123;</span><br><span class="line">                    arr[j] = arr[j-gap]</span><br><span class="line">                    j -= gap</span><br><span class="line">                &#125;</span><br><span class="line">                arr[j] = temp</span><br><span class="line">            &#125;</span><br><span class="line">            gap = Math.floor(gap / 2)</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(&#x27;希尔排序：&#x27; + arr)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>效率：</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301091710987.png" alt="image-20230109171009853"></p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301091714254.png" alt="image-20230109171448025"></p><p>基本思想：</p><p>1、选定pivot中心轴</p><p>2、将大于pivot的数字放在piovt右边</p><p>3、将小于pivot的数字放在piovt右边</p><p>4、分别对左右子序列重复前前三步操作（递归）</p><p>5、当递归尽头的左右子序列长度都为1时，跳出递归</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//快速排序</span><br><span class="line">ArrayList.prototype.QuickSort = function (L ,R) &#123;</span><br><span class="line">    // L和R是为了确定一开始左和右的数如：（0，8），而left和right会随着循环变化，</span><br><span class="line">    // 如果不设定L和R，会导致栈溢出</span><br><span class="line">    // 在递归过程中，right和left是不断变化的，而L和R会保持一开始输入的数字</span><br><span class="line">    let arr = this.array</span><br><span class="line">    let left = L</span><br><span class="line">    let right = R</span><br><span class="line">    //将数组最右边的设为piovt</span><br><span class="line">    //先左指针循环，再右指针循环</span><br><span class="line">    //如果pivot为最左边</span><br><span class="line">    //则右指针先循环，左指针再循环</span><br><span class="line">    let pivot = arr[right]</span><br><span class="line">    if(left &gt;= right) &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    while(left &lt; right) &#123;</span><br><span class="line">        //左指针向右遍历，遇到比pivot大的数停止</span><br><span class="line">        while(left &lt; right &amp;&amp; arr[left] &lt;= pivot)&#123;</span><br><span class="line">            left++</span><br><span class="line">        &#125;</span><br><span class="line">        if(arr[left] &gt; pivot)&#123;</span><br><span class="line">            arr[right] = arr[left]</span><br><span class="line">        &#125;</span><br><span class="line">        //左指针向左遍历，遇到比pivot小的数停止</span><br><span class="line">        while(left &lt; right &amp;&amp; pivot &lt;= arr[right])&#123;</span><br><span class="line">            right--</span><br><span class="line">        &#125;</span><br><span class="line">        if(arr[right] &lt; pivot)&#123;</span><br><span class="line">            arr[left] = arr[right]</span><br><span class="line">        &#125;</span><br><span class="line">        if(left &gt;= right)&#123;</span><br><span class="line">            arr[left] = pivot</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //pivot左边递归</span><br><span class="line">    this.QuickSort(L , left-1)</span><br><span class="line">    //pivot右边递归</span><br><span class="line">    this.QuickSort(left+1 ,R)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301101529051.png" alt="image-20230110152931858"></p><ul><li>X表示该数字放进了最右边的位置</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Typora图片共享（Github+Picgo+Typora）</title>
      <link href="/2023/01/05/Typora%E5%9B%BE%E7%89%87%E5%85%B1%E4%BA%AB%EF%BC%88Github+Picgo+Typora%EF%BC%89/"/>
      <url>/2023/01/05/Typora%E5%9B%BE%E7%89%87%E5%85%B1%E4%BA%AB%EF%BC%88Github+Picgo+Typora%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora图片共享（Github-Picgo-Typora）"><a href="#Typora图片共享（Github-Picgo-Typora）" class="headerlink" title="Typora图片共享（Github+Picgo+Typora）"></a>Typora图片共享（Github+Picgo+Typora）</h1><p>1、安装PicGo</p><p>右下角有安装，然后转跳到主页即可根据流程进行安装。</p><p>安装路径：<code>D:\typora\Typora</code></p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301051415761.png" alt="image-20230104173203948"></p><h2 id="2、配置Github"><a href="#2、配置Github" class="headerlink" title="2、配置Github"></a>2、配置Github</h2><h3 id="建立仓库"><a href="#建立仓库" class="headerlink" title="建立仓库"></a>建立仓库</h3><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301051415933.png" alt="image-20230104173406460"></p><h3 id="获得token"><a href="#获得token" class="headerlink" title="获得token"></a>获得token</h3><p>右上角头上setting &#x3D;&gt; 左下角Developer settings &#x3D;&gt; Personal access tokens (classic) &#x3D;&gt;generate new token &#x3D;&gt;</p><p>得到token</p><h2 id="3、配置Picgo"><a href="#3、配置Picgo" class="headerlink" title="3、配置Picgo"></a>3、配置Picgo</h2><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301051415261.png" alt="image-20230104172612597"></p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301051415656.png" alt="image-20220328081536617"></p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301051415008.png" alt="image-20230105133448055"></p><h3 id="4、测试验证即可"><a href="#4、测试验证即可" class="headerlink" title="4、测试验证即可"></a>4、测试验证即可</h3><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301051415582.png" alt="image-20230104173804757"></p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301051415647.png" alt="image-20230105133305869"></p><h2 id="5、图片上传配置"><a href="#5、图片上传配置" class="headerlink" title="5、图片上传配置"></a>5、图片上传配置</h2><p>对typora进行图片配置，如下图所示</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301051417484.png" alt="image-20230105141748428"></p><ul><li><p>首先在本地写typora文件时，要打开Picgo</p></li><li><p>将图片插入方式改为以上形式后，当粘贴图片进入typora时，图片会自动上传Github，且图片路径会从本地路径更改为Github建立的图床中的路径。如：上图为<code>(https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301051417484.png)</code></p></li><li><p>这样，当md文件上传到Github中，图片自动引用Github图床中的图片。</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301051421175.png" alt="image-20230105142120130"></p><p>Github中md文件如下：</p><p><img src="https://raw.githubusercontent.com/BiAJiii/imgsBed/main/imgs/202301051421539.png" alt="image-20230105142142496"></p></li><li><p>大功告成~</p></li></ul><h2 id="6、md上传hexo博客"><a href="#6、md上传hexo博客" class="headerlink" title="6、md上传hexo博客"></a>6、md上传hexo博客</h2><p>因为上述图片引用的都是GitHub图床的内容，可以直接访问，所以，在hexo上传md时，只需要将需要的md文件，复制到blog对应的md文件即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>创建hexo遇到的一些问题</title>
      <link href="/2023/01/04/%E5%88%9B%E5%BB%BAhexo%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2023/01/04/%E5%88%9B%E5%BB%BAhexo%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="安装问题"><a href="#安装问题" class="headerlink" title="安装问题"></a>安装问题</h2><p>在<code>yarn add global hexo-cli</code>后，无法执行hexo命令（command not found）<br>在添加全局变量未果后，发现需要使用npx指令</p><ul><li><code>npx hexo init blog</code></li><li><code>cd blog</code></li><li><code>yarn add</code></li><li><code>npx hexo server</code><br>会在4000端口生成网站</li></ul><h2 id="运行问题"><a href="#运行问题" class="headerlink" title="运行问题"></a>运行问题</h2><p>但成功在4000端口运行后，发现无法载入，可能是端口已经被占用<br>*解决方法：修改端口<br><code>npx hexo s -p 5000</code><br>PS:如果找不到hexo命令，都需要提前加个npx，因为在命令行下调用，可以让项目内部安装的模块用起来更方便，npx运行的时候，会到node_modules&#x2F;.bin路径和环境变量$PATH里面，检查命令是否存在，所以系统命令也可以调用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/04/hello-world/"/>
      <url>/2023/01/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
